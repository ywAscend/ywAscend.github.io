<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>tree-shaking</title>
    <url>/2020/05/27/tree-shaking/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>tree shaking 所谓的“摇树”，是指删除无用的代码，这样在构建大型应用时，可以大大减少打包的体积</p><a id="more"></a>
<h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 必须使用es6模块 </span><br><span class="line">2. 开启production环境</span><br><span class="line">3. 在package.json中配置</span><br></pre></td></tr></table></figure>
<h4 id="1-必须使用es6模块"><a href="#1-必须使用es6模块" class="headerlink" title="1.必须使用es6模块"></a>1.必须使用es6模块</h4><p>必须遵循 ES6 的模块规范 (import &amp; export)，如果是 CommonJS 规范 (require) 则无法使用。只打包某一模块中被使用的代码。</p>
<ul>
<li>模块a.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const add (x,y) =&gt; x+y</span><br><span class="line"></span><br><span class="line">const test = () =&gt; &#123;</span><br><span class="line">    consle.log(&apos;print test&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>模块b.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;add&#125; from &apos;./a.js&apos;</span><br><span class="line">add()</span><br></pre></td></tr></table></figure></li>
<li>入口文件：index.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;./b.js&apos;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>最终webpack在打包时，只会打包 a 模块中被用到的 add 相关的代码块</p>
<h4 id="2-开启production"><a href="#2-开启production" class="headerlink" title="2.开启production"></a>2.开启production</h4><p>生产环境下会自动开启</p>
<h4 id="3-package-json中配置-sildeEffects"><a href="#3-package-json中配置-sildeEffects" class="headerlink" title="3. package.json中配置 sildeEffects"></a>3. package.json中配置 sildeEffects</h4><p>sideEffects是webpack4新增的一个特性，通过给package.json加入sideEffects:false声明该模块是否含有副作用，为tree-shaking 提供更大的优化空间。</p>
<p>什么是副作用？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//test.js</span><br><span class="line">export function test (t) &#123; return t &#125;</span><br><span class="line">console.log(test(6))</span><br></pre></td></tr></table></figure>
<p>tree-shaking后test模块变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log( function (t)  &#123; return v &#125;(6) )</span><br></pre></td></tr></table></figure>
<p>这样 test 模块导出被忽略，但是副作用代码被保留，很多即使经过 tree shaking ，然而 bundle size 还是没有明显的减小。而通常我们期望的是 test 模块既然不被使用了，其中所有的代码应该不被引入才对。<br>这时就需要用到 sideEffects了。如果被引入的 包/模块 被标记为 sideEffects: false 了，那么不管它是否真的有副作用，只要它没有被引用到，整个 模块/包 都会被完整的移除。</p>
<p>在package.json中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;sideEffects&quot;:false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们配置了 “sideEffects”: false ，代表所有代码都没有副作用（都可以进行tree shaking）。<br>但是这还有个问题：可能会把css / @babel/polyfill （副作用）文件干掉</p>
<p>那么我们只需要为指定的文件配置sideEffects即可，修改sileEffects中的配置为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;sideEffects&quot;:[&quot;*.css&quot;] //.css文件具有副作用，tree-shaking时不被错误删除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开发环境使用-tree-shaking"><a href="#开发环境使用-tree-shaking" class="headerlink" title="开发环境使用 tree-shaking"></a>开发环境使用 tree-shaking</h3><p>在webpack配置中加入以下配置即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    optimization:&#123;</span><br><span class="line">        usedExports: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存</title>
    <url>/2020/05/22/%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>缓存优化：<br>webpack缓存有 babel缓存和文件资源缓存两种。</p><a id="more"></a>
<h3 id="1-babel缓存"><a href="#1-babel缓存" class="headerlink" title="1. babel缓存"></a>1. babel缓存</h3><ul>
<li>babel缓存让第二次打包构建速度更快</li>
</ul>
<p>开启bebel缓存:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//babel-loader options中配置 cacheDirectory:true</span><br><span class="line">const confg = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    [</span><br><span class="line">                        &quot;@babel/preset-env&quot;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            useBuiltIns:&apos;usage&apos;,</span><br><span class="line">                            corejs: 3,</span><br><span class="line">                            targets:&#123; </span><br><span class="line">                                //指定兼容到哪个版本</span><br><span class="line">                                &quot;chrome&quot;:&quot;60&quot;,</span><br><span class="line">                                &quot;firefox&quot;:&quot;60&quot;,</span><br><span class="line">                                &quot;ie&quot;:&quot;9&quot;,</span><br><span class="line">                                &quot;safari&quot;:&quot;10&quot;,</span><br><span class="line">                                &quot;edge&quot;:&quot;11&quot;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    //开启babel缓存</span><br><span class="line">                    //第二次构建时，会读取之前的缓存</span><br><span class="line">                    cacheDirectory: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-文件资源缓存"><a href="#2-文件资源缓存" class="headerlink" title="2. 文件资源缓存"></a>2. 文件资源缓存</h3><ul>
<li><p>hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hash： 每次webpack构建时会生成一个唯一的hash值</span><br><span class="line">问题： 因为js和css同时使用一个hash值</span><br><span class="line">如果重新打包，会导致所有缓存失效（可能只改动一个文件）</span><br></pre></td></tr></table></figure></li>
<li><p>chunkhash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chunkhash: 根据chunk生成的hash值，如果打包来源于同一个chunk,那么hash值就一样</span><br><span class="line">问题：js和css的hash值还是一样</span><br><span class="line">      因为css是在js中被引进入的，多以同属于同一个chunk</span><br><span class="line">什么是chunk？ </span><br><span class="line">    以一个入口文件 index.js,引入其他依赖（js|css）,这些依赖会跟入口文件形成一个文件，</span><br><span class="line">    这一个文件就叫做chunk，也叫代码块。所有根据入口文件引入东西都会生成一个chunk</span><br></pre></td></tr></table></figure>
</li>
<li><p>contenthash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contenthash: 根据文件的内容生成hash值。不同文件hash值一定不一样</span><br><span class="line">--&gt; 让代码上线运行缓存更好使用</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="配置服务："><a href="#配置服务：" class="headerlink" title="配置服务："></a>配置服务：</h3><h3 id="1-server-js-会使用build文件下缓存"><a href="#1-server-js-会使用build文件下缓存" class="headerlink" title="1. server.js  会使用build文件下缓存"></a>1. server.js  会使用build文件下缓存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 服务器代码</span><br><span class="line"> * 启动服务器指令：</span><br><span class="line"> * npm i nodemon -g</span><br><span class="line"> * nodemon server.js</span><br><span class="line"> * </span><br><span class="line"> * node server.js</span><br><span class="line"> * </span><br><span class="line"> * 访问服务器地址：</span><br><span class="line"> * http://localhost:3000</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> const express = require(&apos;express&apos;)</span><br><span class="line"></span><br><span class="line"> const app = express()</span><br><span class="line"></span><br><span class="line"> app.use(express.static(&apos;build&apos;,&#123; maxAge:1000*3600 &#125;))</span><br><span class="line"></span><br><span class="line"> app.listen(3000)</span><br></pre></td></tr></table></figure>

<h3 id="2-webpack-congfig-js"><a href="#2-webpack-congfig-js" class="headerlink" title="2. webpack.congfig.js"></a>2. webpack.congfig.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">//css抽取为单独文件</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">//css压缩</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//process.env.NODE_ENV = &apos;development&apos;</span><br><span class="line">process.env.NODE_ENV = &apos;prodution&apos;</span><br><span class="line"></span><br><span class="line">const commonCssConfig = [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    &apos;css-loader&apos;,</span><br><span class="line">    //css兼容</span><br><span class="line">    &#123;</span><br><span class="line">        loader:&apos;postcss-loader&apos;,</span><br><span class="line">        options:&#123;</span><br><span class="line">            indent: &apos;postcss&apos;,</span><br><span class="line">            plugins:()=&gt;[</span><br><span class="line">                require(&apos;postcss-preset-env&apos;)()   // package.json需配置 &apos;browserslist&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;js/built.[contenthash:10].js&apos;,</span><br><span class="line">        path: Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">          //js处理</span><br><span class="line">          &#123;</span><br><span class="line">            test: /\.js$/, //js语法检查 eslint --&gt;eslint-loader eslint-config-airbnb-base - eslint-plugin-import</span><br><span class="line">            exclude:/node_modules/,</span><br><span class="line">            enforce: &apos;pre&apos;,</span><br><span class="line">            loader:&apos;eslint-loader&apos;, //package.json 配置 &quot;eslintConfig&quot;: &#123;&quot;extends&quot;:&quot;airbnb-base&quot;&#125;</span><br><span class="line">            options:&#123;</span><br><span class="line">                fix:true //自动修复</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            //以下loader只会匹配一个</span><br><span class="line">            //注意不能有两个配置处理同一种类型文件，所以将eslint-loader拿到外层</span><br><span class="line">            //优化生产环境打包速度</span><br><span class="line">            oneOf:[</span><br><span class="line">                    /**</span><br><span class="line">                     * 正常来讲，一个文件只能被一个loader处理</span><br><span class="line">                     * 当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序</span><br><span class="line">                     * 先执行 esLint 再执行babel</span><br><span class="line">                     */</span><br><span class="line">                    &#123;   //js兼容</span><br><span class="line">                        test:/\.js$/, // babel: babel-loader--&gt;@babel/core--&gt;@babel/preset-env -- core-js --&gt;@babel/poly-fill</span><br><span class="line">                        exclude:/node_modules/,</span><br><span class="line">                        loader:&apos;babel-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            presets:[</span><br><span class="line">                                [</span><br><span class="line">                                    &quot;@babel/preset-env&quot;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        useBuiltIns: &apos;usage&apos;, //按需加载</span><br><span class="line">                                        corejs: 3, //指定corejs版本</span><br><span class="line">                                        targets:&#123; //指定兼容到哪个版本</span><br><span class="line">                                            &quot;chrome&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;firefox&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;ie&quot;:&quot;9&quot;,</span><br><span class="line">                                            &quot;safari&quot;:&quot;10&quot;,</span><br><span class="line">                                            &quot;edge&quot;:&quot;11&quot;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                ]</span><br><span class="line">                            ],</span><br><span class="line">                            //开启babel缓存</span><br><span class="line">                            //第二次构建时，会读取之前的缓存</span><br><span class="line">                            cacheDirectory: true</span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;,</span><br><span class="line">                    //css样式</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.css$/,</span><br><span class="line">                        use: [...commonCssConfig]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.less$/,</span><br><span class="line">                        use:[ ...commonCssConfig,&apos;less-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    //图片</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.(jpg|png|gif)$/,</span><br><span class="line">                        loader:&apos;url-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            limit:8*1024,</span><br><span class="line">                            name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">                            esModule:false,</span><br><span class="line">                            outputPath:&apos;imgs&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.html$/,</span><br><span class="line">                        loader:&apos;html-loader&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    //字体图标</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.(ttf|woff|woff2|svg|eot)$/,</span><br><span class="line">                        loader:&apos;file-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            outputPath:&apos;media&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: process.env.NODE_ENV === &apos;development&apos; ? &apos;development&apos; : &apos;production&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&apos;./src/index.html&apos;,</span><br><span class="line">            minify:&#123; //压缩html</span><br><span class="line">                collapseWhitespace:true, //移除空格</span><br><span class="line">                removeComments: true  //移除注释</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &apos;css/built.[contenthash:10].css&apos; //重命名打包后的css</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCssAssetsWebpackPlugin() //压缩css</span><br><span class="line">    ],</span><br><span class="line">    devtool:&apos;source-map&apos;,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: &apos;build&apos;,</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true,</span><br><span class="line">        hot:true  //开启热加载</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>oneOf</title>
    <url>/2020/05/22/oneOf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>webpack的 module是对一些文件的loader的配置，如：</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<p>上述配置正常使用没有问题，但是从性能上考虑，webpack在对 .css|.less 文件进行loader编译时，每个css|less文件都要进行 css和less的loader匹配，当文件非常多的时候，就会造成性能很大的消耗</p>
<p>那么在webpack中就需要使用 oneOf 对这一块来进行优化。</p>
<p>很简单，直接在 rules 中添加oneOf就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            oneOf:[</span><br><span class="line">                 //js处理</span><br><span class="line">                    &#123;</span><br><span class="line">                        test: /\.js$/, //js语法检查 eslint --&gt;eslint-loader eslint-config-airbnb-base - eslint-plugin-import</span><br><span class="line">                        exclude:/node_modules/,</span><br><span class="line">                        enforce: &apos;pre&apos;,</span><br><span class="line">                        loader:&apos;eslint-loader&apos;, //package.json 配置 &quot;eslintConfig&quot;: &#123;&quot;extends&quot;:&quot;airbnb-base&quot;&#125;</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            fix:true //自动修复</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;   //js兼容</span><br><span class="line">                        test:/\.js$/, // babel: babel-loader--&gt;@babel/core--&gt;@babel/preset-env -- core-js --&gt;@babel/poly-fill</span><br><span class="line">                        exclude:/node_modules/,</span><br><span class="line">                        loader:&apos;babel-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            presets:[</span><br><span class="line">                                [</span><br><span class="line">                                    &quot;@babel/preset-env&quot;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        useBuiltIns: &apos;usage&apos;, //按需加载</span><br><span class="line">                                        corejs: 3, //指定corejs版本</span><br><span class="line">                                        targets:&#123; //指定兼容到哪个版本</span><br><span class="line">                                            &quot;chrome&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;firefox&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;ie&quot;:&quot;9&quot;,</span><br><span class="line">                                            &quot;safari&quot;:&quot;10&quot;,</span><br><span class="line">                                            &quot;edge&quot;:&quot;11&quot;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;,</span><br><span class="line">                    //css样式</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.css$/,</span><br><span class="line">                        use: [...commonCssConfig]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.less$/,</span><br><span class="line">                        use:[ ...commonCssConfig,&apos;less-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    //其他</span><br><span class="line">                    ...</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<p>在 oneOf下的loader只会匹配一个。</p>
<ul>
<li>注意不能有两个配置处理同一种类型文件<br>但 上述js有连个loader，怎么解决这个问题呢？</li>
</ul>
<p>正常来讲，一个文件只能被一个loader处理,当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序,先执行 esLint 再执行babel.这里需要将eslint-loader拿到外层，优化生产环境打包速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                //js处理</span><br><span class="line">                    &#123;</span><br><span class="line">                        test: /\.js$/, //js语法检查 eslint </span><br><span class="line">                        enforce: &apos;pre&apos;,</span><br><span class="line">                        loader:&apos;eslint-loader&apos;, //package.json 配置 &quot;eslintConfig&quot;: &#123;&quot;extends&quot;:&quot;airbnb-base&quot;&#125;</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            fix:true //自动修复</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            &#123; </span><br><span class="line">              oneOf:[</span><br><span class="line">                    &#123;   //js兼容</span><br><span class="line">                        test:/\.js$/, // babel: babel-loader--&gt;@babel/core--&gt;@babel/preset-env -- core-js --&gt;@babel/poly-fill</span><br><span class="line">                        exclude:/node_modules/,</span><br><span class="line">                        loader:&apos;babel-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            presets:[</span><br><span class="line">                                [</span><br><span class="line">                                    &quot;@babel/preset-env&quot;,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        useBuiltIns: &apos;usage&apos;, //按需加载</span><br><span class="line">                                        corejs: 3, //指定corejs版本</span><br><span class="line">                                        targets:&#123; //指定兼容到哪个版本</span><br><span class="line">                                            &quot;chrome&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;firefox&quot;:&quot;60&quot;,</span><br><span class="line">                                            &quot;ie&quot;:&quot;9&quot;,</span><br><span class="line">                                            &quot;safari&quot;:&quot;10&quot;,</span><br><span class="line">                                            &quot;edge&quot;:&quot;11&quot;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;,</span><br><span class="line">                    //css样式</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.css$/,</span><br><span class="line">                        use: [...commonCssConfig]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        test:/\.less$/,</span><br><span class="line">                        use:[ ...commonCssConfig,&apos;less-loader&apos;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    //其他</span><br><span class="line">                    ...</span><br><span class="line">            &#125;   ]</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>source-map</title>
    <url>/2020/05/21/source-map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>source-map ： 一种提供 源代码 到 构建后代码 映射的技术，如果构建后代码出错了，通过映射可以追踪源代码错误，便于问题定位，开发调试</p><a id="more"></a>
<ul>
<li>开启source-map<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    devtool: &apos;source-map&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>打开控制台，运行webpack：<br><img src="https://i.loli.net/2020/06/06/vm1M7NViRhO4Ppn.png" alt="运行结果"></p>
<p>打包后的文件生成了 .map 文件</p>
<p>修改 devtool的值为 inline-source-map</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    devtool: &apos;inline-source-map&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>
<p>打开控制台，运行webpack：<br><img src="https://i.loli.net/2020/06/06/2YaAXdrbm9GjKgC.png" alt="运行结果"></p>
<p>inline-source-map打包后没有生成.map文件。</p>
<p>点击查看打包后的 built.js文件,在bult.js文件内部生成了以 sourceMappingURL 为索引指向源代码的文件 </p>
<p><img src="https://i.loli.net/2020/06/06/rNCgL1yh8J7lvMV.png" alt="inline-source-map-built"></p>
<h4 id="内联和外部"><a href="#内联和外部" class="headerlink" title="内联和外部"></a>内联和外部</h4><p>生成 外部.map文件的为外部；在内部生成指向源代码文件，不生成.map文件为内联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source-map ：外部</span><br><span class="line">inline-source-map ：内联</span><br><span class="line"></span><br><span class="line">内联和外部的区别：</span><br><span class="line"></span><br><span class="line">1.外部生成了 .map 文件，内联不生成 </span><br><span class="line">2.内联构建速度更快</span><br></pre></td></tr></table></figure>

<h4 id="devtool配置值"><a href="#devtool配置值" class="headerlink" title="devtool配置值"></a>devtool配置值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool: [inline-|hidden-|eval-][nosources-][cheap-[module-]] source-map</span><br><span class="line"></span><br><span class="line">souce-map: 外部</span><br><span class="line">错误代码准确信息 和 源代码的错误位置</span><br><span class="line"></span><br><span class="line">inline-source-map: 内联</span><br><span class="line">只生成一个内联source-map</span><br><span class="line">错误代码准确信息 和 源代码的错误位置</span><br><span class="line"></span><br><span class="line">hidden-source-map: 外部</span><br><span class="line">错误代码错误原因，但是没有源代码错误位置</span><br><span class="line">不能追踪源代码错误，只能提示到构建后代码的错误位置</span><br><span class="line"></span><br><span class="line">eval-sourve-map：内联</span><br><span class="line">错误代码准确信息 和 源代码的错误位置</span><br><span class="line">每一个文件都生成对应的source-map,都在eval</span><br><span class="line"></span><br><span class="line">nosources-source-map ：外部</span><br><span class="line">错误代码精确信息，但是没有任何代码信息</span><br><span class="line"></span><br><span class="line">cheap-source-map：外部</span><br><span class="line">错误代码准确信息 和 源代码的错误位置</span><br><span class="line">只能精确到行</span><br><span class="line"></span><br><span class="line">cheap-module-source-map: 外部</span><br><span class="line">错误代码精确信息 和 源代码的错误位置</span><br><span class="line">modul会将loader的source map 加入</span><br><span class="line"></span><br><span class="line">开发环境： 速度快，调试更友好</span><br><span class="line">速度快（eval&gt;inline&gt;cheap&gt;...）</span><br><span class="line">    eval-cheap-source-map</span><br><span class="line">    eval-source-map</span><br><span class="line">调试更友好</span><br><span class="line">    source-map</span><br><span class="line">    cheap-module-source-map</span><br><span class="line">    cheap-source-map</span><br><span class="line"></span><br><span class="line">--&gt; eval-source-map / eval-cheap-module-source-map</span><br><span class="line"></span><br><span class="line">生产环境：源代码要不要隐藏？ 调试要不要更友好</span><br><span class="line">内联会让代码体积变大，所以在生成环境不用内联</span><br><span class="line">nosources-source-map  全部隐藏</span><br><span class="line">hidden-source-map 只隐藏源代码，只会提示构建后代码错误信息</span><br><span class="line"></span><br><span class="line">--&gt; source-map / cheap-module-source-map</span><br></pre></td></tr></table></figure>
<h4 id="综上："><a href="#综上：" class="headerlink" title="综上："></a>综上：</h4><h4 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval-source-map / eval-cheap-module-source-map</span><br></pre></td></tr></table></figure>
<h4 id="生产环境："><a href="#生产环境：" class="headerlink" title="生产环境："></a>生产环境：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source-map / cheap-module-sourcee-map</span><br></pre></td></tr></table></figure>

<h4 id="PS-create-react-app中"><a href="#PS-create-react-app中" class="headerlink" title="PS: create-react-app中"></a>PS: create-react-app中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">开发环境： cheap-module-source-map</span><br><span class="line"></span><br><span class="line">生产环境：source-map</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境优化-HMR</title>
    <url>/2020/05/20/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BC%98%E5%8C%96-HMR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前面配置中，无论是js还是css只要有一个文件改动，都会造成所有模块全部重新打包。项目中引入的模块较少时，影响不大。而当项目中引入上千个模块时，每次改动都会造成这些模块的重新打包，打包构建效率大大降低，影响开发效率。</p><a id="more"></a>
<p>那么能不能在修改后，只重新打包修改的模块呢？ HMR就是为解决这个问题而生。</p>
<p>HMR ： hot module replacement 热模块替换/模块热替换<br>作用：当一个模块发生变化，只会重新打包这一个模块，而不是打包所有模块，极大提升构建速度</p>
<h4 id="开启热模块更新功能："><a href="#开启热模块更新功能：" class="headerlink" title="开启热模块更新功能："></a>开启热模块更新功能：</h4><p>webpack.config.js中devServer开启 热更新功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    contentBase:&apos;build&apos;,</span><br><span class="line">    compress: true,</span><br><span class="line">    port:3000,</span><br><span class="line">    open:true,</span><br><span class="line">    hot: true //开启HMR功能</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMR</span><br><span class="line"> |- node_modules</span><br><span class="line"> |- src</span><br><span class="line"> |   |- css</span><br><span class="line"> |   |   |-iconfont.css</span><br><span class="line"> |   |   |-index.less</span><br><span class="line"> |   |- image</span><br><span class="line"> |   |   |-angular.png</span><br><span class="line"> |   |   |-vue.png</span><br><span class="line"> |   |- js</span><br><span class="line"> |   |   |-index.js</span><br><span class="line"> |   |   |-print.js</span><br><span class="line"> |   |- media</span><br><span class="line"> |   |   |-iconfont.eot</span><br><span class="line"> |   |   |-iconfont.svg</span><br><span class="line"> |   |   |-iconfont.ttf</span><br><span class="line"> |   |   |-iconfont.woff</span><br><span class="line"> |   |- index.html</span><br><span class="line"> |-webpack.config.js</span><br><span class="line"> |-package.json</span><br></pre></td></tr></table></figure>

<p>index.js 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 打包入口文件</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> //引入css</span><br><span class="line"> import &apos;../css/iconfont.css&apos;</span><br><span class="line"> //引入less</span><br><span class="line"> import &apos;../css/index.less&apos;</span><br><span class="line"></span><br><span class="line"> import print from &apos;./print&apos;</span><br><span class="line"></span><br><span class="line"> console.log(&apos;index文件加载了&apos;)</span><br><span class="line"></span><br><span class="line"> print()</span><br><span class="line"></span><br><span class="line">const add = (x,y)=&gt; x+y</span><br><span class="line"></span><br><span class="line">console.log(add(1,5))</span><br></pre></td></tr></table></figure>
<p>print.js 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;printjs加载了&apos;)</span><br><span class="line"></span><br><span class="line">const print = ()=&gt;&#123;</span><br><span class="line">  const content = &apos;print打印了&apos;</span><br><span class="line">  console.log(content)</span><br><span class="line">&#125;</span><br><span class="line">export default print</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>浏览器控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HMR] Waiting for update signal from WDS...</span><br><span class="line">print.js:2 printjs加载了</span><br><span class="line">index.js:18 index文件加载了</span><br><span class="line">print.js:6 print打印了</span><br><span class="line">index.js:24 6</span><br><span class="line">DevTools failed to load SourceMap: Could not load content for webpack:///node_modules/_sockjs-client@1.4.0@sockjs-client/dist/sockjs.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME</span><br><span class="line">client:48 [WDS] Hot Module Replacement enabled.</span><br><span class="line">client:52 [WDS] Live Reloading enabled.</span><br></pre></td></tr></table></figure>
<p>从浏览器控制台输出可以看出，各个模块加载ok</p>
<h3 id="样式文件HMR功能"><a href="#样式文件HMR功能" class="headerlink" title="样式文件HMR功能"></a>样式文件HMR功能</h3><p>样式配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                //处理less资源</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                //处理css资源</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>
<p>下面我们来修改 index.less文件，将图片的宽度由原来的200px,改为300px。<br>再来看看浏览器控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HMR] Waiting for update signal from WDS...</span><br><span class="line">print.js:2 printjs加载了</span><br><span class="line">index.js:18 index文件加载了</span><br><span class="line">print.js:6 print打印了</span><br><span class="line">index.js:24 6</span><br><span class="line">DevTools failed to load SourceMap: Could not load content for webpack:///node_modules/_sockjs-client@1.4.0@sockjs-client/dist/sockjs.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME</span><br><span class="line">client:48 [WDS] Hot Module Replacement enabled.</span><br><span class="line">client:52 [WDS] Live Reloading enabled.</span><br><span class="line"></span><br><span class="line">2client:55 [WDS] App updated. Recompiling...</span><br><span class="line">reloadApp.js:19 [WDS] App hot update...</span><br><span class="line">log.js:24 [HMR] Checking for updates on the server...</span><br><span class="line">log.js:24 [HMR] Updated modules:</span><br><span class="line">log.js:16 [HMR]  - ./src/css/index.less //只有less模块重新编译</span><br><span class="line">log.js:24 [HMR] App is up to date.</span><br></pre></td></tr></table></figure>
<p>从上面操作可以看出，在没有对样式文件进行处理的情况下，样式文件可以使用HMR功能，这是因为 style-loader内部实现了HMR功能<br>因此在开发模式中通常使用 style-loader 这样不必单独对样式文件进行HMR处理。</p>
<h3 id="js文件HMR"><a href="#js文件HMR" class="headerlink" title="js文件HMR"></a>js文件HMR</h3><p>修改一下入口文件print.js中代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;printjs加载了&apos;)</span><br><span class="line"></span><br><span class="line">const print = ()=&gt;&#123;</span><br><span class="line">  const content = &apos;print打印了0000&apos;</span><br><span class="line">  console.log(content)</span><br><span class="line">&#125;</span><br><span class="line">export default print</span><br></pre></td></tr></table></figure>
<p>来看下浏览器控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HMR] Waiting for update signal from WDS...</span><br><span class="line">print.js:2 printjs加载了</span><br><span class="line">index.js:18 index文件加载了</span><br><span class="line">print.js:6 print打印了0000</span><br><span class="line">index.js:24 6</span><br></pre></td></tr></table></figure>
<p>发现整个包重新构建了，说明默认不能使用HMR功能。那么如果JS要使用HMR,那么需要修改js代码，添加支持 HMR功能的代码 </p>
<ul>
<li>注意： HMR功能对js的处理，只能处理非入口js文件的其他文件</li>
</ul>
<p>在 index.js文件中新增以下代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(module.hot)&#123;</span><br><span class="line">  //一旦module.hot 为true,说明开启了HMR功能 --&gt; 让 HMR功能代码生效</span><br><span class="line">  module.hot.accept(&apos;./print.js&apos;,function()&#123;</span><br><span class="line">    //方法会监听 print.js文件的变化，一旦发生变化，其他默认不会重新打包构建。</span><br><span class="line">    //会执行后面的回调函数</span><br><span class="line">    print()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，修改 print.js 中的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;printjs加载了&apos;)</span><br><span class="line"></span><br><span class="line">const print = ()=&gt;&#123;</span><br><span class="line">  const content = &apos;print打印了&apos;</span><br><span class="line">  console.log(content)</span><br><span class="line">&#125;</span><br><span class="line">export default print</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HMR] Waiting for update signal from WDS...</span><br><span class="line">VM2890 print.js:2 printjs加载了</span><br><span class="line">index.js:18 index文件加载了</span><br><span class="line">VM2890 print.js:6 print打印了0000</span><br><span class="line">index.js:24 6</span><br><span class="line">DevTools failed to load SourceMap: Could not load content for webpack:///node_modules/_sockjs-client@1.4.0@sockjs-client/dist/sockjs.js.map: HTTP error: status code 404, net::ERR_UNKNOWN_URL_SCHEME</span><br><span class="line">client:48 [WDS] Hot Module Replacement enabled.</span><br><span class="line">client:52 [WDS] Live Reloading enabled.</span><br><span class="line"></span><br><span class="line">2client:55 [WDS] App updated. Recompiling...</span><br><span class="line">reloadApp.js:19 [WDS] App hot update...</span><br><span class="line">log.js:24 [HMR] Checking for updates on the server...</span><br><span class="line">print.js:2 printjs加载了</span><br><span class="line">print.js:6 print打印了      //print.js实现了HMR功能</span><br><span class="line">log.js:24 [HMR] Updated modules:</span><br><span class="line">log.js:24 [HMR]  - ./src/js/print.js</span><br><span class="line">log.js:24 [HMR] App is up to date.</span><br></pre></td></tr></table></figure>

<h3 id="html文件-HMR"><a href="#html文件-HMR" class="headerlink" title="html文件 HMR"></a>html文件 HMR</h3><p>修改 index.html文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;webapck&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;H1&gt;开发环境配置000&lt;/H1&gt; //修改处: 开发环境配置 --&gt; 开发环境配置000</span><br><span class="line">  &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;img src=&quot;./image/vue.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;iconfont icon-icon-test&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;iconfont icon-icon-test1&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;iconfont icon-icon-test2&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;iconfont icon-icon-test3&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>控制台并无变化。html文件：默认不能使用HMR功能，html文件不能热更新了</p>
<ul>
<li><p>解决：修改entry入口，将html文件引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    entry: [&apos;./src/js/index.js&apos;,&apos;./src/index.html&apos;],</span><br><span class="line">    output:&#123;</span><br><span class="line">       filename:&apos;js/built.js&apos;,</span><br><span class="line">       path:Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>
<p>再次修改 index.html中的内容，发现控制台发生了变化,包重新构建一次</p>
</li>
<li><p>因热更新是多个模块下，只更新发生改变的模块，提高构建速度。而index.html只有一个文件，因此不需要HMR功能 </p>
<h3 id="全部配置"><a href="#全部配置" class="headerlink" title="全部配置"></a>全部配置</h3></li>
<li><p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: [&apos;./src/js/index.js&apos;,&apos;./src/index.html&apos;],</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename:&apos;js/built.js&apos;,</span><br><span class="line">    path:Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      //loader的配置</span><br><span class="line">      &#123;</span><br><span class="line">        //处理less资源</span><br><span class="line">        test:/\.less$/,</span><br><span class="line">        use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        //处理css资源</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; //处理图片资源</span><br><span class="line">        test:/\.(png|jpg|gif)$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options:&#123;</span><br><span class="line">          //小于8K的图片进行base64编码</span><br><span class="line">          limit: 8*1024,</span><br><span class="line">          //关闭es模块，启用commonjs模块</span><br><span class="line">          esModule:false, </span><br><span class="line">          //取hash值前10位的，原扩展名</span><br><span class="line">          name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">          //输出路径</span><br><span class="line">          outputPath:&apos;imgs&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        //html 图片处理模块</span><br><span class="line">        test: /\.html$/,</span><br><span class="line">        use:[&apos;html-loader&apos;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        //处理其他资源，除了 css/js/html</span><br><span class="line">        exclude: /.(css|js|html|less|png|jpg|gif)/,</span><br><span class="line">        loader: &apos;file-loader&apos;,</span><br><span class="line">        options:&#123;</span><br><span class="line">          name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">          outputPath:&apos;media&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: &apos;./src/index.html&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  mode: &apos;development&apos;,</span><br><span class="line"></span><br><span class="line">  //开发服务器配置 安装webpack-dev-server ，启动指令 npx webpack-dev-server</span><br><span class="line">  devServer:&#123;</span><br><span class="line">    //项目运行目录，构建后的目录</span><br><span class="line">    contentBase: Path.resolve(__dirname,&apos;build&apos;),</span><br><span class="line">    //启动 gzip压缩，代码体积更小</span><br><span class="line">    compress: true,</span><br><span class="line">    //端口</span><br><span class="line">    port: 3000,</span><br><span class="line">    //自动打开浏览器</span><br><span class="line">    open: true,</span><br><span class="line">    //开启HMR功能</span><br><span class="line">    hot: true </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>index.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  /**</span><br><span class="line"> * 打包入口文件</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> //引入css</span><br><span class="line"> import &apos;../css/iconfont.css&apos;</span><br><span class="line"> //引入less</span><br><span class="line"> import &apos;../css/index.less&apos;</span><br><span class="line"></span><br><span class="line"> import print from &apos;./print&apos;</span><br><span class="line"></span><br><span class="line"> console.log(&apos;index文件加载了&apos;)</span><br><span class="line"></span><br><span class="line"> print()</span><br><span class="line"></span><br><span class="line">const add = (x,y)=&gt; x+y</span><br><span class="line"></span><br><span class="line">console.log(add(1,5))</span><br><span class="line"></span><br><span class="line">if(module.hot)&#123;</span><br><span class="line">  //一旦module.hot 为true,说明开启了HMR功能 --&gt; 让 HMR功能代码生效</span><br><span class="line">  module.hot.accept(&apos;./print.js&apos;,function()&#123;</span><br><span class="line">    //方法会监听 print.js文件的变化，一旦发生变化，其他默认不会重新打包构建。</span><br><span class="line">    //会执行后面的回调函数</span><br><span class="line">    print()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack性能优化</title>
    <url>/2020/05/20/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li>开发环境性能优化</li>
<li>生产环境性能优化</li>
</ul><a id="more"></a>
<h2 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h2><ul>
<li>优化打包构建速度</li>
<li>优化代码调试</li>
</ul>
<h2 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h2><ul>
<li>优化打包构建速度</li>
<li>优化代码运行的性能</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>生产环境配置</title>
    <url>/2020/05/20/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>生产环境需要做的工作：</p><a id="more"></a>
<ol>
<li>处理css资源 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">css抽取为单独文件  --&gt; mini-css-extract-plugin</span><br><span class="line">css兼容  --&gt; postcss-loader --&gt; postcss-preset-env</span><br><span class="line">压缩css  --&gt; optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>处理js资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">js语法检查  --&gt; eslint  eslint-loader  eslint-config-airbnb-base eslint-plugin-import</span><br><span class="line">               // package.json 需配置 &#123; &quot;eslintConfig&quot;:&quot;airbnb-base&quot;&#125;</span><br><span class="line"></span><br><span class="line">js兼容  --&gt; babel-loader @babel/core @babel/preset-env core-js</span><br><span class="line"></span><br><span class="line">js压缩  --&gt; webpack.config.js中的 &quot;mode&quot;设置为 &apos;production&apos;即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>html资源</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打包后的js自动注册入html  --&gt; html-webpack-plugin</span><br><span class="line">压缩html --&gt; new HtmlWebpackPlugin()的minify属性</span><br></pre></td></tr></table></figure>
<p>完整配置：</p>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">//css抽取为单独文件</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">//css压缩</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//process.env.NODE_ENV = &apos;development&apos;</span><br><span class="line">process.env.NODE_ENV = &apos;prodution&apos;</span><br><span class="line"></span><br><span class="line">const commonCssConfig = [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    &apos;css-loader&apos;,</span><br><span class="line">    //css兼容</span><br><span class="line">    &#123;</span><br><span class="line">        loader:&apos;postcss-loader&apos;,</span><br><span class="line">        options:&#123;</span><br><span class="line">            indent: &apos;postcss&apos;,</span><br><span class="line">            plugins:()=&gt;[</span><br><span class="line">                require(&apos;postcss-preset-env&apos;)()   // package.json需配置 &apos;browserslist&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:&apos;js/built.js&apos;,</span><br><span class="line">        path: Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            //js处理</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/, //js语法检查 eslint --&gt;eslint-loader eslint-config-airbnb-base - eslint-plugin-import</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                enforce: &apos;pre&apos;,</span><br><span class="line">                loader:&apos;eslint-loader&apos;, //package.json 配置 &quot;eslintConfig&quot;: &#123;&quot;extends&quot;:&quot;airbnb-base&quot;&#125;</span><br><span class="line">                options:&#123;</span><br><span class="line">                    fix:true //自动修复</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   //js兼容</span><br><span class="line">                test:/\.js$/, // babel: babel-loader--&gt;@babel/core--&gt;@babel/preset-env -- core-js --&gt;@babel/poly-fill</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[</span><br><span class="line">                        [</span><br><span class="line">                            &quot;@babel/preset-env&quot;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                useBuiltIns: &apos;usage&apos;, //按需加载</span><br><span class="line">                                corejs: 3, //指定corejs版本</span><br><span class="line">                                targets:&#123; //指定兼容到哪个版本</span><br><span class="line">                                    &quot;chrome&quot;:&quot;60&quot;,</span><br><span class="line">                                    &quot;firefox&quot;:&quot;60&quot;,</span><br><span class="line">                                    &quot;ie&quot;:&quot;9&quot;,</span><br><span class="line">                                    &quot;safari&quot;:&quot;10&quot;,</span><br><span class="line">                                    &quot;edge&quot;:&quot;11&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;,</span><br><span class="line">            //css样式</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                use: [...commonCssConfig]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[ ...commonCssConfig,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            //图片</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(jpg|png|gif)$/,</span><br><span class="line">                loader:&apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit:8*1024,</span><br><span class="line">                    name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">                    esModule:false,</span><br><span class="line">                    outputPath:&apos;imgs&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.html$/,</span><br><span class="line">                loader:&apos;html-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            //字体图标</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(ttf|woff|woff2|svg|eot)$/,</span><br><span class="line">                loader:&apos;file-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    outputPath:&apos;media&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: process.env.NODE_ENV === &apos;development&apos; ? &apos;development&apos; : &apos;production&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&apos;./src/index.html&apos;,</span><br><span class="line">            minify:&#123; //压缩html</span><br><span class="line">                collapseWhitespace:true, //移除空格</span><br><span class="line">                removeComments: true  //移除注释</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &apos;css/built.css&apos; //重命名打包后的css</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCssAssetsWebpackPlugin() //压缩css</span><br><span class="line">    ],</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: &apos;build&apos;,</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true,</span><br><span class="line">        hot:true  //开启热加载</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wepack_test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/core&quot;: &quot;^7.9.6&quot;,</span><br><span class="line">    &quot;@babel/polyfill&quot;: &quot;^7.8.7&quot;,</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;^7.9.6&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^8.1.0&quot;,</span><br><span class="line">    &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.5.2&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;eslint-config-airbnb-base&quot;: &quot;^14.1.0&quot;,</span><br><span class="line">    &quot;eslint-loader&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-import&quot;: &quot;^2.20.2&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">    &quot;html-loader&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.2.0&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.11.1&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^1.1.4&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.42.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.11&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.10.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: &#123;</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">      &quot;last 1 chrome version&quot;,</span><br><span class="line">      &quot;last 1 firefox version&quot;,</span><br><span class="line">      &quot;last 1 safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;not dead&quot;,</span><br><span class="line">      &quot;not op_min all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>js兼容</title>
    <url>/2020/05/18/js%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="js语法检查回顾："><a href="#js语法检查回顾：" class="headerlink" title="js语法检查回顾："></a>js语法检查回顾：</h3><p>安装的插件：</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eslint --&gt; eslint-loader --&gt; eslint-config-airbnb-base --&gt; eslint-plugin-import</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">        module:&#123;</span><br><span class="line">            rules:[</span><br><span class="line">                &#123;</span><br><span class="line">                    test:/\.js$/,</span><br><span class="line">                    exclude:/node_modules/,</span><br><span class="line">                    loader:&quot;eslint-loader&quot;,</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        fix:true //自动修复</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<p>package.json配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;eslintConfig&quot;:&#123;</span><br><span class="line">        &quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js语法兼容处理"><a href="#js语法兼容处理" class="headerlink" title="js语法兼容处理"></a>js语法兼容处理</h3><p>js 兼容性处理需要用到babel插件，安装以下插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">babel-loader --&gt; @babel/core --&gt; @babel/preset-env</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//第一种配置：直接配置</span><br><span class="line">// 这种写法有个问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    //预设： 指示 babel做怎样的兼容性处理</span><br><span class="line">                    presets:[</span><br><span class="line">                        &quot;@babel/preset-env&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<p>第二种配置： 全部js兼容性处理 –&gt; @babel/polyfill  </p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i @babel/polyfill -D</span><br></pre></td></tr></table></figure>

<p>使用：<br>入口文件index.js直接引入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos; @babel/polyfill&apos;</span><br></pre></td></tr></table></figure>
<p>第二种这种配置会将将所有兼容性代码全部引入，造成最后打包的体积太大，而实际上我们只需要解决部分兼容性问题。</p>
<p>有没有可以按需加载兼容处理的呢? 这里就要介绍三种方法了</p>
<p>第三种方法： 按需加载兼容，通过 core-js 来实现</p>
<p>安装 core-js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i core-js -D</span><br></pre></td></tr></table></figure>
<p>webpack.config.js中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    //预设： 指示 babel做怎样的兼容性处理</span><br><span class="line">                    presets:[</span><br><span class="line">                        </span><br><span class="line">                        [</span><br><span class="line">                            &quot;@babel/preset-env&quot;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                //按需加载</span><br><span class="line">                                useBuiltIns: &apos;useage&apos;,</span><br><span class="line">                                //指定core-js版本</span><br><span class="line">                                corejs:&#123;</span><br><span class="line">                                    version: 3</span><br><span class="line">                                &#125;,</span><br><span class="line">                                targets:&#123; //指定兼容到哪个版本</span><br><span class="line">                                    chrome: &apos;60&apos;,</span><br><span class="line">                                    firefox: &apos;60&apos;,</span><br><span class="line">                                    ie:&apos;9&apos;,</span><br><span class="line">                                    safari: &apos;10&apos;,</span><br><span class="line">                                    edge:&apos;11&apos;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<h3 id="wabpck-config-js-整体配置"><a href="#wabpck-config-js-整体配置" class="headerlink" title="wabpck.config.js 整体配置"></a>wabpck.config.js 整体配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = &apos;development&apos;</span><br><span class="line"></span><br><span class="line">const Config = &#123;</span><br><span class="line">    entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename: &apos;js/built.js&apos;,</span><br><span class="line">        path: Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            // &#123;</span><br><span class="line">            //     test:/\.js$/,</span><br><span class="line">            //     exclude:/node_modules/,</span><br><span class="line">            //     loader: &apos;eslint-loader&apos;,</span><br><span class="line">            //     options:&#123;</span><br><span class="line">            //         fix:true</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[</span><br><span class="line">                        [</span><br><span class="line">                            &apos;@babel/preset-env&apos;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                //按需加载</span><br><span class="line">                                useBuiltIns: &apos;usage&apos;,</span><br><span class="line">                                //指定core-js版本</span><br><span class="line">                                corejs:&#123;</span><br><span class="line">                                    version: 3</span><br><span class="line">                                &#125;,</span><br><span class="line">                                //指定兼容性做到哪个版本</span><br><span class="line">                                targets:&#123;</span><br><span class="line">                                    chrome: &apos;60&apos;,</span><br><span class="line">                                    firefox: &apos;60&apos;,</span><br><span class="line">                                    ie:&apos;9&apos;,</span><br><span class="line">                                    safari: &apos;10&apos;,</span><br><span class="line">                                    edge:&apos;11&apos;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line"></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /.css$/,</span><br><span class="line">                use:[</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;postcss-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            ident:&apos;postcss&apos;,</span><br><span class="line">                            plugins:()=&gt;[</span><br><span class="line">                                require(&apos;postcss-preset-env&apos;)()</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(png|jpg|gif)$/,</span><br><span class="line">                loader:&apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit: 8*1024,</span><br><span class="line">                    name:&apos;[name].[hash:10].[ext]&apos;,</span><br><span class="line">                    esModule:false,</span><br><span class="line">                    outputPath:&apos;imgs&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.html$/,</span><br><span class="line">                loader:&apos;html-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(ttf|woff|woff2|eot|svg)$/,</span><br><span class="line">                loader:&apos;file-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">                    outputPath:&apos;media&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &apos;./src/index.html&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:&apos;css/built.css&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: Path.resolve(__dirname,&apos;build&apos;),</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = Config</span><br></pre></td></tr></table></figure>

<h3 id="babel-单独配置，使用-babelrc"><a href="#babel-单独配置，使用-babelrc" class="headerlink" title="babel 单独配置，使用 .babelrc"></a>babel 单独配置，使用 .babelrc</h3><p>根目录下新建 .babelrc 文件,当使用babel-loader时，如果没有配置options，babel会自己去找 .babelrc然后加载其中的配置</p>
<p>.babelrc 简单配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[</span><br><span class="line">        &quot;@babel/preset-env&quot;,[</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;useBuiltIns&quot;:&quot;usage&quot;, //按需加载</span><br><span class="line">                &quot;corejs&quot;: 3, //core-js版本</span><br><span class="line">                &quot;targets&quot;:&#123; //指定浏览器版本</span><br><span class="line">                    &quot;chrome&quot;: &quot;60&quot;,</span><br><span class="line">                    &quot;firefox&quot;: &quot;60&quot;,</span><br><span class="line">                    &quot;ie&quot;: &quot;9&quot;,</span><br><span class="line">                    &quot;safari&quot;: &quot;10&quot;,</span><br><span class="line">                    &quot;edge&quot;:&quot;11&quot;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                loader: &apos;babel-loader&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>js语法检查</title>
    <url>/2020/05/15/js%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在项目中，团队代码规范，风格保持一致，对于项目维护、开发效率来说很重要。因此项目中需要进行必要的语法检查，保持代码风格统一，提高开发效率。目前使用比较广泛的就是 eslint了。</p><a id="more"></a>
<p>安装插件： eslint eslint-loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i eslint eslint-loader -D</span><br></pre></td></tr></table></figure>
<p>设置检查规则：在github中排名最高的为 airbnb-base，推荐使用</p>
<p>使用airbnb-base, 需要安装eslint-config-airbnb-base eslint eslint-plugin-import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//安装插件(eslint上一步已安装，这里不再安装)</span><br><span class="line">cnpm i eslint-config-airbnb-base eslint-plugin-import -D</span><br></pre></td></tr></table></figure>
<p>webpack.config.js配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                loader:&apos;eslint-loader&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>package.json中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;eslintConfig&quot;:&#123;</span><br><span class="line">        &quot;&quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>项目入口文件index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add = (x,y)=&gt;x+y</span><br><span class="line">console.log(add(10,20))</span><br></pre></td></tr></table></figure>

<p>目前配置已完成，把项目在终端中打开，运行：webpack，发现如下报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR in ./src/js/index.js</span><br><span class="line">Module Error (from ../node_modules/_eslint-loader@4.0.2@eslint-loader/dist/cjs.js):</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\Desktop\wproject\15.js语法检测\src\js\index.js</span><br><span class="line">  1:26  error    Expected linebreaks to be &apos;LF&apos; but found &apos;CRLF&apos;  linebreak-style</span><br><span class="line">  1:26  error    Missing semicolon                                semi</span><br><span class="line">  2:27  error    Expected linebreaks to be &apos;LF&apos; but found &apos;CRLF&apos;  linebreak-style</span><br><span class="line">  2:27  error    Missing semicolon                                semi</span><br><span class="line">  3:1   error    Expected linebreaks to be &apos;LF&apos; but found &apos;CRLF&apos;  linebreak-style</span><br><span class="line">  4:1   error    Expected linebreaks to be &apos;LF&apos; but found &apos;CRLF&apos;  linebreak-style</span><br><span class="line">  5:15  error    A space is required after &apos;,&apos;                    comma-spacing</span><br><span class="line">  5:17  error    Missing space before =&gt;                          arrow-spacing</span><br><span class="line">  5:22  error    Operator &apos;+&apos; must be spaced                      space-infix-ops</span><br><span class="line">  5:24  error    Expected linebreaks to be &apos;LF&apos; but found &apos;CRLF&apos;  linebreak-style</span><br><span class="line">  5:24  error    Missing semicolon                                semi</span><br><span class="line">  6:1   warning  Unexpected console statement                     no-console</span><br><span class="line">  6:19  error    A space is required after &apos;,&apos;                    comma-spacing</span><br><span class="line">  6:24  error    Newline required at end of file but not found    eol-last</span><br><span class="line">  6:24  error    Missing semicolon                                semi</span><br><span class="line"></span><br><span class="line">✖ 15 problems (14 errors, 1 warning)</span><br><span class="line">  14 errors and 0 warnings potentially fixable with the `--fix` option.</span><br></pre></td></tr></table></figure>
<p>从上述错误日志中，可看出是因为index.js中的代码，和airbnb-base中的检查规则不一致导致报错。那要一个一个手动改正吗？显然不可取。其实只需要一步即可修正一些常见的简单的规则。</p>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">        module:&#123;</span><br><span class="line">            rules:[</span><br><span class="line">                &#123;</span><br><span class="line">                    test:/\.js$/,</span><br><span class="line">                    loader:&apos;eslint-loader&apos;,</span><br><span class="line">                    //在options中配置 fix:true 即可自动修复基本语法规则</span><br><span class="line">                    options:&#123;</span><br><span class="line">                        fix:true</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>再次在终端中打开项目，运行 webpack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\wproject\15.js语法检测&gt;webpack</span><br><span class="line">Hash: 777adccf3aa8d036c15a</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 2408ms</span><br><span class="line">Built at: 2020-05-15 10:05:22</span><br><span class="line">        Asset       Size  Chunks             Chunk Names</span><br><span class="line">     built.js   17.9 KiB    main  [emitted]  main</span><br><span class="line">css/built.css   18 bytes    main  [emitted]  main</span><br><span class="line">   index.html  386 bytes          [emitted]</span><br><span class="line">Entrypoint main = css/built.css built.js</span><br><span class="line">[../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./src/css/index.less] 288 bytes &#123;main&#125;</span><br><span class="line">[built]</span><br><span class="line">[./src/css/index.css] 39 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/css/index.less] 635 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/js/index.js] 107 bytes &#123;main&#125; [built] [1 warning]</span><br><span class="line">    + 3 hidden modules</span><br><span class="line"></span><br><span class="line">WARNING in ./src/js/index.js</span><br><span class="line">Module Warning (from ../node_modules/_eslint-loader@4.0.2@eslint-loader/dist/cjs.js):</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator\Desktop\wproject\15.js语法检测\src\js\index.js</span><br><span class="line">  6:1  warning  Unexpected console statement  no-console</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br><span class="line"></span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">    [../node_modules/_html-webpack-plugin@4.3.0@html-webpack-plugin/lib/loader.js!./src/index.html] 406 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br><span class="line">Child mini-css-extract-plugin ../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js??postcss!src/css/index.css:</span><br><span class="line">    Entrypoint mini-css-extract-plugin = *</span><br><span class="line">    [../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js?!./src/css/index.css] ../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src??postcss!./src/css/index.css 288 bytes &#123;mini-css-extract-plugin&#125; [built]</span><br><span class="line">        + 1 hidden module</span><br></pre></td></tr></table></figure>
<p>项目打包成功，但是有一个waring(稍后再看),再来看项目入口文件 index.js中的代码。<br>修复前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add = (x,y)=&gt;x+y</span><br><span class="line">console.log(add(10,20))</span><br></pre></td></tr></table></figure>
<p>修复后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add = (x, y) =&gt; x + y; //eslint自动修复了代码</span><br><span class="line">console.log(add(10, 20));</span><br></pre></td></tr></table></figure>
<p>eslint自动修复Ok,现在我们来看看刚才出现的waring</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\wproject\15.js语法检测\src\js\index.js</span><br><span class="line">  6:1  warning  Unexpected console statement  no-console</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br></pre></td></tr></table></figure>

<p>no-console 说明是index.js中的 console.log(add(10,20)) ,airbnb不建议在项目中使用console,解决如下<br>index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const add = (x, y) =&gt; x + y; //eslint自动修复了代码</span><br><span class="line">//eslint-diable-next-line</span><br><span class="line">console.log(add(10, 20));  //这一行代码不进行eslint检测</span><br></pre></td></tr></table></figure>
<p>再次在终端中运行：webapck</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\Desktop\wproject\15.js语法检测&gt;webpack</span><br><span class="line">Hash: 2caa20ab5beed81950bc</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 2387ms</span><br><span class="line">Built at: 2020-05-15 10:06:04</span><br><span class="line">        Asset       Size  Chunks             Chunk Names</span><br><span class="line">     built.js   17.9 KiB    main  [emitted]  main</span><br><span class="line">css/built.css   18 bytes    main  [emitted]  main</span><br><span class="line">   index.html  386 bytes          [emitted]</span><br><span class="line">Entrypoint main = css/built.css built.js</span><br><span class="line">[../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./src/css/index.less] 288 bytes &#123;main&#125;</span><br><span class="line">[built]</span><br><span class="line">[./src/css/index.css] 39 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/css/index.less] 635 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/js/index.js] 140 bytes &#123;main&#125; [built]</span><br><span class="line">    + 3 hidden modules</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">    [../node_modules/_html-webpack-plugin@4.3.0@html-webpack-plugin/lib/loader.js!./src/index.html] 406 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br><span class="line">Child mini-css-extract-plugin ../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js??postcss!src/css/index.css:</span><br><span class="line">    Entrypoint mini-css-extract-plugin = *</span><br><span class="line">    [../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js?!./src/css/index.css] ../node_modules/_css-loader@3.5.3@css-loader/dist/cjs.js!../node_modules/_postcss-loader@3.0.0@postcss-loader/src??postcss!./src/css/index.css 288 bytes &#123;mini-css-extract-plugin&#125; [built]</span><br><span class="line">        + 1 hidden module</span><br></pre></td></tr></table></figure>
<p>waring已经没有了，但是在实际项目中最好不要使用 //eslint-diable-next-line</p>
<h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><p>package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wepack_test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.5.2&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;eslint-config-airbnb-base&quot;: &quot;^14.1.0&quot;,</span><br><span class="line">    &quot;eslint-loader&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;eslint-plugin-import&quot;: &quot;^2.20.2&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">    &quot;html-loader&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.2.0&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.11.1&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^1.1.4&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.42.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.11&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.10.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: &#123;</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">      &quot;last 1 chrome version&quot;,</span><br><span class="line">      &quot;last 1 firefox version&quot;,</span><br><span class="line">      &quot;last 1 safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;not dead&quot;,</span><br><span class="line">      &quot;not op_min all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;eslintConfig&quot;:&#123;</span><br><span class="line">    &quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//css兼容需设置nodejs 中的环境变量</span><br><span class="line">process.env.NODE_ENV = &apos;prodction&apos;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename: &apos;built.js&apos;,</span><br><span class="line">        path: Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;   </span><br><span class="line">                /**</span><br><span class="line">                 * 只检查自己写的源代码，第三方的库不用检查</span><br><span class="line">                 * </span><br><span class="line">                 * eslint eslint-loader </span><br><span class="line">                 * </span><br><span class="line">                 * 插件airbnb： eslint-config-airbnb-base eslint-plugin-import</span><br><span class="line">                 * </span><br><span class="line">                 * package.json中配置</span><br><span class="line">                 * </span><br><span class="line">                 * &quot;eslintConfig&quot;:&#123;</span><br><span class="line">                 *      &quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class="line">                 *  &#125;</span><br><span class="line">                 * </span><br><span class="line">                 */</span><br><span class="line">                test:/\.js$/,</span><br><span class="line">                exclude:/node_modules/,</span><br><span class="line">                loader:&apos;eslint-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    fix: true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;   </span><br><span class="line">                test:/\.css$/,</span><br><span class="line">                use:[</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:&apos;postcss-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            ident:&apos;postcss&apos;,</span><br><span class="line">                            plugins:()=&gt;[</span><br><span class="line">                                require(&apos;postcss-preset-env&apos;)()</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[</span><br><span class="line">                    &apos;style-loader&apos;,</span><br><span class="line">                    &apos;css-loader&apos;,</span><br><span class="line">                    &apos;less-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(jpg|png|gif)$/,</span><br><span class="line">                loader:&apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit: 8*1024,</span><br><span class="line">                    name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">                    esModule:false,</span><br><span class="line">                    outputPath:&apos;imgs&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.html$/,</span><br><span class="line">                loader:&apos;html-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(woff|woff2|ttf|eot|svg)$/,</span><br><span class="line">                loader:&apos;file-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">                    outputPath:&apos;media&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&apos;./src/index.html&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename:&apos;css/built.css&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:Path.resolve(__dirname,&apos;build&apos;),</span><br><span class="line">        compress:true,</span><br><span class="line">        port:3000,</span><br><span class="line">        open:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交或add时提示LF将会被替换为CRLF</title>
    <url>/2020/05/14/git%E6%8F%90%E4%BA%A4%E6%88%96add%E6%97%B6%E6%8F%90%E7%A4%BALF%E5%B0%86%E4%BC%9A%E8%A2%AB%E6%9B%BF%E6%8D%A2%E4%B8%BACRLF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>什么是LF和CRLF ?<br>1.LF和CRLF都是换行符，在各操作系统下，换行符是不一样的，Linux/UNIX下是LF,而Windows下是CRLF，早期的MAC OS是CR,后来的OS X在更换内核后和UNIX一样也是LF.<br>这种不统一确实对跨平台的文件交换带来了麻烦。虽然靠谱的文本编辑器和 IDE 都支持这几种换行符，但文件在保存时总要有一个固定的标准啊，比如跨平台协作的项目源码，到底保存为哪种风格的换行符呢？</p><a id="more"></a>
<p>2.Git 由大名鼎鼎的 Linus 开发，最初只可运行于 *nix 系统，因此推荐只将 UNIX 风格的换行符保存入库。但它也考虑到了跨平台协作的场景，并且提供了一个“换行符自动转换”功能。</p>
<p>安装好 GitHub 的 Windows 客户端之后，这个功能默认处于“自动模式”。<br>当你在签出文件时，Git 试图将 UNIX 换行符（LF）替换为 Windows 的换行符（CRLF）；当你在提交文件时，它又试图将 CRLF 替换为 LF。<br>所以Git在拉取代码的时候，git会自动将代码之中与你当前系统不同的换行方式自动转换成当前系统的换行方式。<br>这样一来在提交代码的时候，git会认为你未修改内容的文件也认为是修改过的，然后提示你warning: LF will be replaced by CRLF这样的信息。<br>3.上面的解决办法固然解决了很多人的问题，但是在某些情况下就不适用。这次项目中，在用fiskit框架npm deploy打包前端文件到后端路径的时候，打包出来的文件用git进行commit的时候，提示LF和CRLF，文件的换行符被修改过，这时候也尝试了上面的方法，也没有用，最后在知乎上看到一篇文章<a href="https://www.zhihu.com/question/50862500，" target="_blank" rel="noopener">https://www.zhihu.com/question/50862500，</a></p>
<p>有效的解决方法<br>如果设置core.autocrlf = false，那么很可能会出现CRLF和LF混合的情况，这样会导致一些问题，例如git diff 失去功能，会发现很多行代码并没有修改，然而被认为是修改过了。<br>首先core.autocrlf = true在windows上才是正确的选择，那么如何避免warning呢？还要有以下几个步骤：</p>
<p>添加.gitattributes<br>设置core.safecrlf = true<br>使用dos2unix、notepad++等工具来将LF转换成CRLF</p>
<p>使用 dos2unix 将CRLF转换为LF:</p>
<p>dos2unix命令用来将DOS格式的文本文件转换成UNIX格式的（DOS/MAC to UNIX text file format converter）<br>将UNIX格式文本文件转成成DOS格式的是unix2dos命令。</p>
<p>如果一次转换多个文件，把这些文件名直接跟在dos2unix之后。（注：也可以加上-o参数，也可以不加，效果一样）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dos2unix file1 file2 file3 </span><br><span class="line">dos2unix -o file1 file2 file3</span><br></pre></td></tr></table></figure>

<p>如果批量替换public/components 目录下的所有文件使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find public/components/ -name &quot;*&quot; | xargs dos2unix</span><br></pre></td></tr></table></figure>
<p>要更改文件格式的后缀为.js ,那么借助于下面的命令就可以轻松的实现批量替换格式：<br>批量替换为linux文件格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find public/components/ -name &quot;*.js&quot; | xargs dos2unix</span><br></pre></td></tr></table></figure>

<p>批量替换为dos文件格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find public/components/ -name &quot;*.js&quot; | xargs unix2dos</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>版本控制工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>css兼容处理和压缩</title>
    <url>/2020/05/14/css%E5%85%BC%E5%AE%B9%E5%92%8C%E5%8E%8B%E7%BC%A9%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="css兼容"><a href="#css兼容" class="headerlink" title="css兼容"></a>css兼容</h3><p>前面css-loader将css处理为js资源是的webpack能够引入样式资源，style-loader将处理后的样式资源插入到head中。但是页面加时，css先转为js再引入到页面时，会造成页面闪白。所以通过 mini-css-extract-plugin 将css资源通过link形式引入，解决页面闪白的问题。<br>实际开发中还要考虑css对各浏览器的兼容性处理，为了解放开发人员，让开发人员专注于开发工作，这种兼容性工作通常使用插件处理。</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postcss: 处理兼容性的插件</span><br><span class="line"></span><br><span class="line">使用postcss需要下载:   postcss-loader --&gt; postcss-preset-env</span><br><span class="line"></span><br><span class="line">postcss-preset-env 插件的作用：</span><br><span class="line">帮助 postcss 找到 package.json 中的 browerslist 里面的配置，通过配置加载指定的css兼容性样式</span><br></pre></td></tr></table></figure>
<p>使用postcss：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//安装postcss-loader、postcss-preset-env</span><br><span class="line">cnpm i postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-pluign&apos;)</span><br><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use:[</span><br><span class="line">                   MiniCssExtractPlugin.loader,</span><br><span class="line">                   &apos;css-loader&apos;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: &apos;postcss-loader&apos;,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            indent: &apos;postcss&apos;, //固定写法</span><br><span class="line">                            pulgins:()=&gt;[</span><br><span class="line">                                //插件帮助 postcss找到package.json中 &apos;browserslist&apos;中的配置，加载指定的css样式</span><br><span class="line">                                require(&apos;postcss-preset-env&apos;)()</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;browserslist&quot;:&#123;   //postcss 配置</span><br><span class="line">    &quot;development&quot;:[</span><br><span class="line">      &quot;last 1 chrome version&quot;,</span><br><span class="line">      &quot;last 1 firefox version&quot;,</span><br><span class="line">      &quot;last 1 safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;production&quot;:[</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;not dead&quot;,</span><br><span class="line">      &quot;not op_min all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css压缩"><a href="#css压缩" class="headerlink" title="css压缩"></a>css压缩</h3><p>实际打包中，为减少打的包体积，代码压缩是常用的手段。css压缩也不例外。<br>通常使用 optimize-css-assets-webpack-plugin 来进行css压缩</p>
<p>安装optimize-css-assets-webpack-plugin插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<p>使用插件<br>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//引入optimize-css-assets-webpack-plugin</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line">const config = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin() //基础使用</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//引入路径</span><br><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">//引入 html-webpack-plugin 打包后的js自动注册入html中</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//引入mini-css-extract-plugin，css link引入</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//引入 optimize-css-assets-webpack-plugin, 压缩css</span><br><span class="line">const OptimizeCssAssetsWebpackPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,</span><br><span class="line">  output:&#123;</span><br><span class="line">    filename: &apos;built.js&apos;,</span><br><span class="line">    path: Path.reslove(__dirname,&apos;build&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      //样式资源</span><br><span class="line">      &#123;</span><br><span class="line">        test:/\.css$/,</span><br><span class="line">        use:[</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &apos;css-loader&apos;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &apos;postcss-loader&apos;,</span><br><span class="line">            options:&#123;</span><br><span class="line">              ident: &apos;postcss&apos;,</span><br><span class="line">              plugins:()=&gt;[</span><br><span class="line">                require(&apos;postcss-preset-env&apos;)()  //帮助postcss找到package.json中的&apos;browserslist&apos;配置，加载指定的兼容样式</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test:/.less$/,</span><br><span class="line">            use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">          &#125;,</span><br><span class="line">          //图片资源</span><br><span class="line">          &#123;</span><br><span class="line">            test:/\.(jpg|png|gif)$/,</span><br><span class="line">            loader:&apos;url-loader&apos;,</span><br><span class="line">            options:&#123;</span><br><span class="line">              limit: 8*1024,</span><br><span class="line">              esModule:false,</span><br><span class="line">              name:&apos;[name].[hashL:10].[ext]&apos;,</span><br><span class="line">              outputPath:&apos;imgs&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test:/\.html$/,</span><br><span class="line">            loader:&apos;html-loader&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          //字体图标资源</span><br><span class="line">          &#123;</span><br><span class="line">            test:/\.(woff2|eot|ttf|woff|svg)$/,</span><br><span class="line">            loader: &apos;file-loader&apos;,</span><br><span class="line">            options:&#123;</span><br><span class="line">              name:&apos;[hash:10].[ext]&apos;,</span><br><span class="line">              outputPath:&apos;media&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: &apos;development&apos;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template:&apos;./src/index.html&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      //对输出的文件进行重命名</span><br><span class="line">      filename: &apos;css/built.css&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    new OptimizeCssAssetsWebpackPlugin() //压缩css</span><br><span class="line">  ],</span><br><span class="line">  devServer:&#123;  //webapck-dev-server</span><br><span class="line">    contentBase: Path.reslove(__dirname,&apos;build&apos;),</span><br><span class="line">    port:3000,</span><br><span class="line">    compress:true,</span><br><span class="line">    open:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wepack_test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;css-loader&quot;: &quot;^3.5.2&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^6.0.0&quot;,</span><br><span class="line">    &quot;html-loader&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^4.2.0&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.11.1&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^1.1.4&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^4.1.0&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^4.42.1&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.11&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^3.10.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;:&#123;</span><br><span class="line">    &quot;development&quot;:[</span><br><span class="line">      &quot;last 1 chrome version&quot;,</span><br><span class="line">      &quot;last 1 firefox version&quot;,</span><br><span class="line">      &quot;last 1 safari version&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;production&quot;:[</span><br><span class="line">      &quot;&gt;0.2%&quot;,</span><br><span class="line">      &quot;not dead&quot;,</span><br><span class="line">      &quot;not op_min all&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-css抽离为单独文件</title>
    <url>/2020/05/13/css%E6%8A%BD%E7%A6%BB%E4%B8%BA%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>基础配置中的css是通过style-loader 转为js的样式文件，最后插入在head中引入样式。这样的好处是，页面加载时不会重新请求css文件，但也有缺点页面一次性加载内容较多，影响加载速度。</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            test:/\.css$/,</span><br><span class="line">            use:[</span><br><span class="line">                &apos;style-loader&apos;, //创建style标签，将样式放入head中</span><br><span class="line">                &apos;css-loader&apos;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="https://i.loli.net/2020/05/13/Wj9ZpilE8mVx2sF.png" alt="css-style.png"></p>
<p>通过 mini-css-extract-plugin 插件，将打包后的css通过link引入<br>好处：页面不会闪白 弊端：会发生link请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//安装插件 </span><br><span class="line">cnpm i mini-css-extract-plugin</span><br><span class="line">//引入插件</span><br><span class="line">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class="line">// 配置</span><br><span class="line">const config = &#123;</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            // &apos;style-loader&apos; ,</span><br><span class="line">            MiniCssExtractPluign.loader, //这个loader取代style-loader。作用：提取js中的css成单独文件</span><br><span class="line">            &apos;css-loader&apos;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            //对输出文件进行重命名</span><br><span class="line">            filename: &apos;css/built.css&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<!-- ![css-link.png](https://i.loli.net/2020/05/13/hUBflnIqzFcP4Yb.png) -->

<p><img src="/images/css-link.png" alt></p>
<p>完整配置 webpack.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//引入路径</span><br><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line">//引入 html-webpack-pluign插件，作用将webpack打包后的js自动注入到html中</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">//引入mini-css-extract-plugin 插件，作用抽取css为单独文件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry:&apos;./src/js/index.js&apos;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename: &apos;buit.js&apos;,</span><br><span class="line">        path: Path.reslove(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            //样式loader</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use:[</span><br><span class="line">                    MiniCssExtractPlugin.loader,</span><br><span class="line">                    &apos;css-loader&apos;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            //图片loader</span><br><span class="line">            &#123;</span><br><span class="line">                test:/\.(jpg|png|gif)$/,</span><br><span class="line">                loader: &apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit: 8*1024, </span><br><span class="line">                    esModule:false,</span><br><span class="line">                    name: &apos;[name].[hash:10].[ext]&apos;,</span><br><span class="line">                    outPath:&apos;img&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.html$/,</span><br><span class="line">                loader: &apos;html-loader&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                //处理字体图标</span><br><span class="line">                test:/\.(woff2|eot|ttf|woff|svg)$/,</span><br><span class="line">                loader: &apos;file-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    outputPath:&apos;media&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &apos;./src/index.html&apos;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            //对输出文件进行重命名</span><br><span class="line">            filename: &apos;css/built.css&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: Path.reslove(__dirname,&apos;build&apos;),</span><br><span class="line">        compress: true,</span><br><span class="line">        port: 3000,</span><br><span class="line">        open: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基本配置</title>
    <url>/2020/05/13/webpack%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>webpack基本配置</p><a id="more"></a>
<ol>
<li>入口</li>
</ol>
<p>一、单个入口文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: &apos;./src/index.js&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单个入口文件简写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/index.js&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、对象语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: &apos;./src/index.js&apos;,</span><br><span class="line">        vendors: &apos;./src/vendors.js&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见应用场景：</p>
<p>分离应用程序和第三方库入口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">    app: &apos;./src/app.js&apos;,</span><br><span class="line">    vendors: &apos;./src/vendors.js&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</p>
<p>此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 <strong>webpack_require</strong>() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。</p>
<p>多页面应用程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">    pageOne: &apos;./src/pageOne/index.js&apos;,</span><br><span class="line">    pageTwo: &apos;./src/pageTwo/index.js&apos;,</span><br><span class="line">    pageThree: &apos;./src/pageThree/index.js&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例告诉 webpack 需要 3 个独立分离的依赖图.<br>在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：<br>使用 CommonsChunkPlugin 为每个页面间的应用程序共享代码创建 bundle。由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</p>
<ol start="2">
<li>出口  </li>
</ol>
<p>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置.</p>
<p>output 的值需要设置为一个对象，包含以下两点：</p>
<p>filename 用于输出文件的文件名。</p>
<p>目标输出目录 path 的绝对路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;built.js&apos;,</span><br><span class="line">        path: path.reslove(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多个入口起点</p>
<p>如果配置创建了多个单独的 “chunk”（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: &apos;./src/app.js&apos;,</span><br><span class="line">        search: &apos;./src/search.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;[name].js&apos;,</span><br><span class="line">        path: __dirname + &apos;/dist&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><br></pre></td></tr></table></figure>

<p>使用CDN加速(官方示例，没太懂)</p>
<p>config.js </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: &quot;/home/proj/cdn/assets/[hash]&quot;,</span><br><span class="line">    publicPath: &quot;http://cdn.example.com/assets/[hash]/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在编译时不知道最终输出文件的 publicPath 的情况下，publicPath 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 <strong>webpack_public_path</strong>。</p>
<ol start="3">
<li>loader</li>
</ol>
<h4 id="处理样式-css-less-sass"><a href="#处理样式-css-less-sass" class="headerlink" title="处理样式 css/less/sass"></a>处理样式 css/less/sass</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.les$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(sass|scss)$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<h4 id="处理图片-jpg-png-gif-jpeg"><a href="#处理图片-jpg-png-gif-jpeg" class="headerlink" title="处理图片 jpg|png|gif|jpeg"></a>处理图片 jpg|png|gif|jpeg</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(jpg|png|gif|jpeg)$/,</span><br><span class="line">                loader: &apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit: 8*1024, //小于8*1024的会被转为base64地址</span><br><span class="line">                    name: &apos;[name].[hash:10].[ext]&apos;, //name属性指向原来的名称，[hash:8]：取前10位hash值，总共32位</span><br><span class="line">                    esModule: false, //关闭es6模块,使用commonjs模块</span><br><span class="line">                    outputPath: &apos;imgs&apos; //打包后图片资源的输出目录</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                //html中的图片资源</span><br><span class="line">                test: /\.html$/,</span><br><span class="line">                loader:&apos;html-loader&apos;,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    outputPath:&apos;imgs&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>plugins</li>
</ol>
<h4 id="使用html-webpack-plugin"><a href="#使用html-webpack-plugin" class="headerlink" title="使用html-webpack-plugin"></a>使用html-webpack-plugin</h4><p>将打包好的js文件自动注入到 html中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//安装</span><br><span class="line">cnpm i html-webpack-plugin -D</span><br><span class="line"></span><br><span class="line">//引用</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &apos;./src/index.html&apos;  //指定html模板</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>mode</li>
</ol>
<p>配置中提供 mode 选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &apos;production&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者从 CLI 参数中传递：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --mode=production</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>devServer  配置本地服务器</li>
</ol>
<p>Webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js构建，它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖：<br>安装插件 webpack-dev-server ： cnpm i webpack-dev-server -D</p>
<p>devServer作为webpack配置选项中的一项，以下是它的一些配置选项:</p>
<p>contentBase ：设置服务器所读取文件的目录，当前我们设置为”./build”<br>port ：设置端口号，如果省略，默认为8080<br>inline ：设置为true，当源文件改变时会自动刷新页面<br>historyApiFallback ：设置为true，所有的跳转将指向index.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: &apos;./bulid&apos;, //服务器运行目录，默认webpack-dev-server会为根文件夹提供本地服务器，</span><br><span class="line">        compress: true, //启用gzip压缩</span><br><span class="line">        port: 3000,  //端口</span><br><span class="line">        open: true   //第一次运行时，自动打开浏览器</span><br><span class="line">        //inline: true , //设置为true,源文件改变时自动刷新页面</span><br><span class="line">        //historyApiFallback: true,  //设置为true，historyFallback能将所有没有做映射的地址都映射到一个入口：index.html中去。</span><br><span class="line">        //hot: true   //热加载，功能：只渲染所改组件的页面效果，不会全部刷新，其他页面数据依然会存在。使用hot,需要配置 hotModule相关模块</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        //热加载相关</span><br><span class="line">        new webpack.NameModulesPlugin(),</span><br><span class="line">        new webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7 .source Map配置   <a href="https://segmentfault.com/a/1190000008315937" target="_blank" rel="noopener">具体配置详见</a></p>
<p>为方便调试打包后的文件，定位问题，通过配置source map 在打包时生成.map文件，使得打包后的代码可读性更高，更易于调试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry:&apos;./src/index.js&apos;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;built.js&apos;,</span><br><span class="line">        path:path.reslove(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &apos;source-map&apos; // 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="基础配置汇总"><a href="#基础配置汇总" class="headerlink" title="基础配置汇总"></a>基础配置汇总</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//引入path</span><br><span class="line">const Path = require(&apos;path&apos;)</span><br><span class="line">//引入 html-webpack-plugin</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &apos;built.js&apos;,</span><br><span class="line">        path: Path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //loader</span><br><span class="line">    module:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            //样式资源</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.less$/,</span><br><span class="line">                use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;less-loader&apos;]</span><br><span class="line">            &#125;,</span><br><span class="line">            //图片资源</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(jpg|png|gif)$/,</span><br><span class="line">                loader: &apos;url-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    limit: 8*1024,</span><br><span class="line">                    esModule:false,</span><br><span class="line">                    name:&apos;[name].[hash:10].[ext]&apos;,</span><br><span class="line">                    outputPath: &apos;imgs&apos;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;  //html图片资源</span><br><span class="line">                test: /\.html$/,</span><br><span class="line">                loader: &apos;html-loader&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            //其他资源，字体图标</span><br><span class="line">            &#123;</span><br><span class="line">                //exclude:/\.(js|html|css|jpg|png|gif|less)$/,</span><br><span class="line">                test:/\.(woff2|eot|ttf|woff|svg)$/,</span><br><span class="line">                loader: &apos;file-loader&apos;,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    outputPath:&apos;media&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &apos;development&apos;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template:&apos;./src/index.html&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase: &apos;./build&apos;,</span><br><span class="line">        compress: true,</span><br><span class="line">        port: 3000,</span><br><span class="line">        open: true</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &apos;source-map&apos;  // 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack介绍</title>
    <url>/2020/05/13/webpack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>webpack四个核心概念</p><a id="more"></a>
<ol>
<li><p>入口：entry</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack入口，指示webpack应该使用哪个模块，来作为构建内部依赖图的开始。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &apos;./src/index.js&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>出口：output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack打包完成后，输出包。包含包名（filename）、输出包的位置(path)。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    const path = require(&apos;path&apos;)</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        entry: &apos;./src/index&apos;,</span><br><span class="line">        output:&#123;</span><br><span class="line">            filename: &apos;built.js&apos;,  //输出包名为 built.js</span><br><span class="line">            path:path.resolve(__dirname,&apos;build&apos;)  //输出包的位置为当前目录下的 build 文件夹下</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于webpack自身只能处理js，但实际项目中会依赖以来很多非js类型的文件。而loader提供了webpack处理那些非js文件的能力。</span><br><span class="line">loader可以将所有类型的文件转为webpack能够处理的有效模块。然后再通过webpack的打包能力，进行处理打包。</span><br><span class="line">本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图可以直接引用的模块。</span><br><span class="line"></span><br><span class="line">loader中通常由两个属性 test、use</span><br><span class="line"></span><br><span class="line">-1) test 属性，用于标识要转换的文件类型</span><br><span class="line">-2）use 属性，表示进行转换时，要使用的loader</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    const path = require(&apos;path&apos;)</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        entry: &apos;./src/index.js&apos;,</span><br><span class="line">        output: &#123;</span><br><span class="line">            filename: &apos;built.js&apos;,</span><br><span class="line">            path: path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        module: &#123;  //loader模块</span><br><span class="line">            rules: [  </span><br><span class="line">                &#123;   //css-loader</span><br><span class="line">                    test: /\.css$/,  </span><br><span class="line">                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插件 plugins</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loader 被用于转换某些类型的模块，而插件可以用于执行范围更广的任务。是对loader能力的扩充。</span><br><span class="line">插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能及其强大，可以用</span><br><span class="line">处理各种各样的任务。</span><br><span class="line"></span><br><span class="line">插件的使用步骤：</span><br><span class="line">安装插件 --&gt; 引用插件（require）--&gt; 使用插件（通常为new一个示例，添加到plugins数组中）</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">    const path = require(&apos;path&apos;)</span><br><span class="line">    //引入插件 html-webpack-plugin</span><br><span class="line">    const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line">        entry: &apos;./src/index.js&apos;,</span><br><span class="line">        output: &#123;</span><br><span class="line">            filename: &apos;built.js&apos;,</span><br><span class="line">            path: path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">        &#125;,</span><br><span class="line">        module:&#123;</span><br><span class="line">            rules: [</span><br><span class="line">                &#123;</span><br><span class="line">                    test: /\.css$/,</span><br><span class="line">                    use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new HtmlWebpackPlugin(&#123;</span><br><span class="line">                template: &apos;./src/index.html&apos;</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模式 mode</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mode 参数 可选值为 development 或 production，webpack会根据相应的模式进行内置优化</span><br><span class="line"></span><br><span class="line">development: 开发模式，代码不会压缩</span><br><span class="line">productionL: 生产模式，webpack自动压缩代码</span><br></pre></td></tr></table></figure>

<h4 id="以上全部简单示例"><a href="#以上全部简单示例" class="headerlink" title="以上全部简单示例"></a>以上全部简单示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">   //引入插件 html-webpack-plugin</span><br><span class="line">   const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">   module.exports = &#123;</span><br><span class="line">       entry: &apos;./src/index.js&apos;,</span><br><span class="line">       output: &#123;</span><br><span class="line">           filename: &apos;built.js&apos;,</span><br><span class="line">           path: path.resolve(__dirname,&apos;build&apos;)</span><br><span class="line">       &#125;,</span><br><span class="line">       mode: &apos;development&apos;,</span><br><span class="line">       module:&#123;</span><br><span class="line">           rules: [</span><br><span class="line">               &#123;</span><br><span class="line">                   test: /\.css$/,</span><br><span class="line">                   use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       plugins: [</span><br><span class="line">           new HtmlWebpackPlugin(&#123;</span><br><span class="line">               template: &apos;./src/index.html&apos;</span><br><span class="line">           &#125;)</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现自适应正方形</title>
    <url>/2020/03/25/CSS%E5%AE%9E%E7%8E%B0%E8%87%AA%E9%80%82%E5%BA%94%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>vw单位实现<br>什么是vw、vh、vmin、vmax?<br>先了解一下视口的概念。 在PC端，视口是值浏览器的可视区域；在移动端，则涉及3个视口：Layout Viewport(布局视口)、Visual Viewport(视觉视口)、Idea Viewport(理想视口)。<br>常说的视口，在PC端指的是 浏览器的可视区域；移动端指的是 layout viewport，浏览器内部的可视区域的大小。即 window.innerWidth/window.innerHeight大小，不包含任务标题栏和底部工具栏的浏览器区域大小。</p><a id="more"></a>
<p>在CSS规范中，视口单位有以下4种：</p>
<p>1.vw: 1vw等于视口宽度的1%<br>2.vh: 1vh等于视口高度的1%<br>3.vmin: 选取vw和vh中最小的那个<br>4.vmax: 选取vw和vh中最大的那个</p>
<p>第一种：宽度百分之五十，高度为50vw</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width:50%;</span><br><span class="line">  height:50vw;</span><br><span class="line">  background:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种: paddig-top或padding-bottom来实现，marging和padding的单位都是相对于宽度</p>
<p>padding-top实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width:50%;</span><br><span class="line">  height:0;</span><br><span class="line">  padding-top: 50%;</span><br><span class="line">  background:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>padding-bottom实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  width:50%;</span><br><span class="line">  height:0;</span><br><span class="line">  padding-bttom: 50%;</span><br><span class="line">  background:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>判断一个字符串中出现次数最多的字符并统计次数</title>
    <url>/2020/03/25/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%B9%B6%E7%BB%9F%E8%AE%A1%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>eg； str = ‘abcdeffffgenbggoo’</p><a id="more"></a>
<p>将字符串转为数组arr，然后利用对象属性，遍历数组arr，将数组arr[i]中的值设为对象obj的属性，并给该属性初始值设为1，没出现一次，对应的属性值加1，这样属性值对应的就是该元素出现的次数了。若对象中，无 arr[i] 属性，则obj添加arr[i] 属性，遍历完成后得到保存 转化后的以数组的 值为对象的key, 出现的次数为 value的 一个obj对象。<br>然后，遍历得到的obj对象，比较每一key对应的value值，当value值最大时，则对应的key即为出现次数最多的字符，value即为出现的次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let str = &apos;abcdeffffgenbfggoo&apos;</span><br><span class="line">function getMaxNumStr (str)&#123;</span><br><span class="line">  let obj = getObj(str)</span><br><span class="line"> </span><br><span class="line">  let strNumber=0,  //最多字符出现的次数</span><br><span class="line">  strItem = &apos;&apos; //出现次数最多的字符</span><br><span class="line">  //遍历obj</span><br><span class="line">  for( let key in obj)&#123;</span><br><span class="line">    if(obj[key]&gt;strNumber)&#123;</span><br><span class="line">      strNumber = obj[key]</span><br><span class="line">      strItem = key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(`字符$&#123;strItem&#125;出现次数最多的,出现次数为$&#123;strNumber&#125;次`)</span><br><span class="line">&#125;</span><br><span class="line">//获取数组值对象</span><br><span class="line">function getObj (str)&#123;</span><br><span class="line">  let arr = str.split(&apos;&apos;)</span><br><span class="line">  let json =&#123;&#125;</span><br><span class="line">  for(let i =0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(!json[arr[i]])&#123;</span><br><span class="line">      json[arr[i]] =1</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      json[arr[i]]+=1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return json</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMaxNumStr(str) //字符f出现次数最多的,出现次数为5次</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/2020/03/25/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="set去重"><a href="#set去重" class="headerlink" title="set去重"></a>set去重</h3><p>利用ES6新增数据类型，其特点是接收一个数组或类数组对象，作为参数来初始化数据，且数据不能重复</p><a id="more"></a>
<p>1.与数组的结构赋值搭配去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr ( arr ) &#123;</span><br><span class="line">  return [...new Set(arr)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.与Array.form 搭配去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr (arr) &#123;</span><br><span class="line">  let newAarray = new Set(arr)</span><br><span class="line">  return Array.form(newArray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="indexOf-去重"><a href="#indexOf-去重" class="headerlink" title="indexOf()去重"></a>indexOf()去重</h3><p>最常见的去重方式：先定义一个空数组，然后调用indexOf方法对原来的数组进行遍历，若 indexOf[arr[i]]返回 -1 则把 arr[i] 放入空数组中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr ( arr ) &#123;</span><br><span class="line">  let newArray = []</span><br><span class="line">  for(let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(newArray.indexOf(arr[i]) === -1)&#123;</span><br><span class="line">      newArray.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象属性去重"><a href="#对象属性去重" class="headerlink" title="对象属性去重"></a>对象属性去重</h3><p>创建一个空对象obj和一个空数组newArray，遍历数组arr，将数组arr[i]中的值设为对象obj的属性，并给该属性初始值设为1，没出现一次，对应的属性值加1，这样属性值对应的就是该元素出现的次数了。若对象中，无 arr[i] 属性，则push到创建的空数组newArray中，同时obj添加arr[i] 属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr (arr)&#123;</span><br><span class="line">  let obj=&#123;&#125;,newArray=[]</span><br><span class="line">  for (let i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(!obj[arr[i]])&#123;</span><br><span class="line">      newArray.push(arr[i])</span><br><span class="line">      obj[arr[i]] = 1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      obj[arr[i]]++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序后-相邻去重"><a href="#排序后-相邻去重" class="headerlink" title="排序后,相邻去重"></a>排序后,相邻去重</h3><p>先调用 sort 方法，然后遍历数组，若当前元素与下一个元素相同，则说明重复，不相同则添加到新数组中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr (arr)&#123;</span><br><span class="line">  let newArray =[]</span><br><span class="line">  arr = arr.sort()</span><br><span class="line">  newArray = [arr[0]]</span><br><span class="line">  for(let i =1;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(arr[i] !== arr[i-1])&#123;</span><br><span class="line">      newArray.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重循环去重-（方法一）"><a href="#双重循环去重-（方法一）" class="headerlink" title="双重循环去重 （方法一）"></a>双重循环去重 （方法一）</h3><p>获取没重复的最右边的值放入新数组，检测到有重复值时终止当前循环同时，进入顶层的循环进行下一轮判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr (arr) &#123;</span><br><span class="line">  let newArray =[]</span><br><span class="line">  for(let i =0; i&lt; arr.length;i++)&#123;</span><br><span class="line">    for(let j = i+1; j&lt; arr.length;j++)&#123;</span><br><span class="line">      if(arr[i] === arr[j])&#123;</span><br><span class="line">        i++;</span><br><span class="line">        j = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    newArray.push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(index)</span><br><span class="line">  return newArray</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重循环去重-（方法二）"><a href="#双重循环去重-（方法二）" class="headerlink" title="双重循环去重 （方法二）"></a>双重循环去重 （方法二）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function newArr2(arr) &#123;</span><br><span class="line">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    for (let j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">      if (arr[i] == arr[j]) &#123;</span><br><span class="line">        arr.splice(j, 1)</span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数组排序</title>
    <url>/2020/03/25/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arr.sort((a,b) =&gt; &#123;</span><br><span class="line">  //return a-b  //升序</span><br><span class="line">  return b-a    //降序</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a>

<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>相邻的两个数进行比较，每一轮比较后，最大（小）的数在最后<br>N个数字的数组排序，总共进行N-1次排序，每趟的排序次数为 N-i次，使用双重循环，外层控制循环次数，内层每趟的比较次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = [10,8,5,2,3,6]</span><br><span class="line"></span><br><span class="line">for(let i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class="line">  for(let j =0;j&lt; arr.length-1-i;j++)&#123;</span><br><span class="line">    if(arr[j]&gt;arr[j+1])&#123;</span><br><span class="line">      let temp = arr[j]</span><br><span class="line">      arr[j] =arr[j+1]</span><br><span class="line">      arr[j+1] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr) // [2,3,5,6,8,10]</span><br></pre></td></tr></table></figure>

<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = [12,20,50,26,32,68]</span><br><span class="line"></span><br><span class="line">for(let i= 0; i&lt;arr.length-1;i++)&#123;</span><br><span class="line">  for(let j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class="line">    if(arr[i]&gt;arr[j])&#123;</span><br><span class="line">      let temp = arr[i]</span><br><span class="line">      arr[i] = arr[j]</span><br><span class="line">      arr[j] = temp</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr) //[12, 20, 26, 32, 50, 68]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>根据路径从嵌套的js对象中取值</title>
    <url>/2020/03/14/%E6%A0%B9%E6%8D%AE%E8%B7%AF%E5%BE%84%E4%BB%8E%E5%B5%8C%E5%A5%97%E7%9A%84js%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%8F%96%E5%80%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>根据一个路径从嵌套的js对象中取出值，如果路径不存在则返回null，路径类型为字符串数组</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">  path = [&apos;a&apos;,&apos;b&apos;] //路径</span><br><span class="line">  obj = &#123; a: &#123; b:2 &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>思考: 用字符串数组中的value值,作为的key,并取对象的key的值，如果有值则说明路径值存在。此时需继续取数组中的value值，作为key去匹配上一个value匹配到的对象值，即要递归调用。既然是递归，那么问题来了，递归必须要有一个终止条件，否则会造成栈溢出。这时当取到字符串最后一个值时，如果匹配到值，则为对应的值，如果没有匹配到值则返回null,此时所取的字符串数组为最后一个值时就是终止递归的条件。</p>
<p>coding :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let path = [&apos;a&apos;,&apos;b&apos;]</span><br><span class="line">let obj = &#123; a: &#123; b:2 &#125;&#125;</span><br><span class="line"></span><br><span class="line">function getDeep ( arr,obj ) &#123;</span><br><span class="line">  let strArr = arr.slice(1) </span><br><span class="line">  let subObj = obj[path[0]]</span><br><span class="line">  if ( arr.length&gt;1 &amp;&amp; obj[arr[0]] ) &#123;</span><br><span class="line">    getDeep ( strArr,subObj )</span><br><span class="line">  &#125; else if (arr.length === 1) &#123;</span><br><span class="line">    console.log(&apos;匹配到的路径值&apos;, subObj == undefined ? &apos;null&apos; : subObj)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDeep ( path, obj ) // 匹配到的路径值:2</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在小程序中使用fontAwesome</title>
    <url>/2020/03/08/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E4%BD%BF%E7%94%A8fontAwesome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前在写小程序时，遇到的字体图标引用的问题，在此记录一下。</p><a id="more"></a>
<h3 id="原生小程序中使用方法："><a href="#原生小程序中使用方法：" class="headerlink" title="原生小程序中使用方法："></a>原生小程序中使用方法：</h3><p>第一步：官网下载font awesome 下载字体图标压缩包，注意版本为V4.7以下。<br>1.1 fontAwesome官网地址:<a href="http://www.fontawesome.com.cn/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/</a></p>
<p>第二步：将fontAwesome字体实体转为base64编码文件<br>2.1 解压下载的压缩包找到fontawesome-webfont.ttf文件。<br>压缩包解压–&gt;fonts–&gt;fontawesome-webfont.ttf<br><img src="/images/ft-ttf.png" alt></p>
<p>2.2 将fontawesome-webfont.ttf文件转为base64编码<br>打开 <a href="https://transfonter.org/" target="_blank" rel="noopener">转码网址</a>,可在线进行转码。<br><img src="/images/ft-upload.png" alt></p>
<p>下载转码后的压缩包文件<br><img src="/images/base-success.png" alt></p>
<p>2.3解压转码后的压缩包，打开style.css文件<br><img src="/images/base-stylecss.jpg" alt><br><img src="/images/style-css.jpg" alt></p>
<p>第三步：获取编码后的最新的font-awesome<br>3.1 打开步骤一中，下载的字体压缩包，找到font-awesome.css文件<br>步骤一下载的压缩包–&gt; css –&gt; font-awesome.css</p>
<p>3.2 打开 font-awesome.css，删除文件中中 @font-face 及其内容。<br><img src="/images/delete.jpg" alt></p>
<p>3.3 将2.3中的style.css文件中的内容复制到3.2中，删除@font-face后的的font-awesome.css内容的最上方。</p>
<p>3.4 此时的font-awesome.css便是我们要在小程序中引用的fontAwesome的样式文件。</p>
<p>第四步：在原生小程序中引用font-awesome.css<br>为方便起见，这里全局引入。在小程序的app.wxss中直接引入： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//(xx为你的文件路径)</span><br><span class="line">@import &quot;/xx/font-awesome.wxss&quot;</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text class=&quot;fa fa-star-o&quot;&gt;&lt;/text&gt;</span><br></pre></td></tr></table></figure>

<h3 id="mpvue中使用fontAwesome"><a href="#mpvue中使用fontAwesome" class="headerlink" title="mpvue中使用fontAwesome"></a>mpvue中使用fontAwesome</h3><p>mpvue支持模块化下载，直接安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install font-awesome</span><br></pre></td></tr></table></figure>

<p>然后在主应用的main.js中全局引入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;font-awesome/css/font-awesome.min.css&apos;;</span><br></pre></td></tr></table></figure>

<p>应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class=&quot;fa fa-eye&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>这样就可以在组件中愉快的使用想要的字体图标了。</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>vue+ts中给Vue拓展属性</title>
    <url>/2019/12/23/vue-ts%E4%B8%AD%E7%BB%99Vue%E6%8B%93%E5%B1%95%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在vue+ts项目中通过prototype给Vue拓展属性时，发现拓展的属性无法获取到，查<a href="'https://vuejs.bootcss.com/v2/guide/typescript.html#%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84-Vue-%E7%BB%84%E4%BB%B6'">文档</a>后发现需要进行类型声明.</p><a id="more"></a>
<p>解决方案如下：</p>
<p>在src/目录下新建一个 .d.ts 文件,如：my-property.d.ts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 1. 确保在声明补充的类型之前导入 &apos;vue&apos;</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">// 2. 定制一个文件，设置你想要补充的类型</span><br><span class="line">//    在 types/vue.d.ts 里 Vue 有构造函数类型</span><br><span class="line">declare module &apos;vue/types/vue&apos; &#123;</span><br><span class="line">// 3. 声明为 Vue 补充的东西</span><br><span class="line">  interface Vue &#123;</span><br><span class="line">    $myMgr: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若还是报错，重启编辑器即可。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli3.0 配置postcss-px2rem</title>
    <url>/2019/12/09/use-postcss-px2rem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem相对于根html,em相对于父级<br>现在常用的适配rem的方法：<br>方法一：<br>1、获取页面宽度</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let deviceWith = document.documentElement.getBoundingClientRect().width</span><br></pre></td></tr></table></figure>
<p>2.设置根html的font-size</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//100为参照，之所以取一个100作为参照，是为了计算rem方便</span><br><span class="line">document.documentElement.style.fontSize = deviceWith /&apos;设计稿的宽度&apos; /100 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>
<p>3.配合媒体查询使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media screen and (max-width:321px)&#123;</span><br><span class="line">    .m-navlist&#123;font-size:15px&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width:321px) and (max-width:400px)&#123;</span><br><span class="line">    .m-navlist&#123;font-size:16px&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (min-width:400px)&#123;</span><br><span class="line">    .m-navlist&#123;font-size:18px&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：<br>1.设置html的font-size为62.5%,这样1rem就等于10px,方便计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">  font-size:62.5%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.重置样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*reset css*/</span><br><span class="line">body,dl,dd,ul,ol,h1,h2,h3,h4,h5,h6,pre,form,input,textarea,p,hr,thead,tbody,tfoot,th,td&#123;margin:0;padding:0;&#125;</span><br><span class="line">ul,ol&#123;list-style:none;&#125;</span><br><span class="line">a&#123;text-decoration:none;&#125;</span><br><span class="line">html&#123;-ms-text-size-adjust:none;-webkit-text-size-adjust:none;text-size-adjust:none;font-size:50px;&#125;</span><br><span class="line">body&#123;line-height:1.5;font-size:16px;&#125;</span><br><span class="line">body,button,input,select,textarea&#123;font-family:&apos;helvetica neue&apos;,tahoma,&apos;hiragino sans gb&apos;,stheiti,&apos;wenquanyi micro hei&apos;,5FAE8F6F96C59ED1,5B8B4F53,sans-serif;&#125;</span><br><span class="line">b,strong&#123;font-weight:bold;&#125;</span><br><span class="line">i,em&#123;font-style:normal;&#125;</span><br><span class="line">table&#123;border-collapse:collapse;border-spacing:0;&#125;</span><br><span class="line">table th,table td&#123;border:1px solid #ddd;padding:5px;&#125;</span><br><span class="line">table th&#123;font-weight:inherit;border-bottom-width:2px;border-bottom-color:#ccc;&#125;</span><br><span class="line">img&#123;border:0 none;width:auto;max-width:100%;vertical-align:top;&#125;</span><br><span class="line">button,input,select,textarea&#123;font-family:inherit;font-size:100%;margin:0;vertical-align:baseline;&#125;</span><br><span class="line">button,html input[type=&quot;button&quot;],input[type=&quot;reset&quot;],input[type=&quot;submit&quot;]&#123;-webkit-appearance:button;cursor:pointer;&#125;</span><br><span class="line">button[disabled],input[disabled]&#123;cursor:default;&#125;</span><br><span class="line">input[type=&quot;checkbox&quot;],input[type=&quot;radio&quot;]&#123;box-sizing:border-box;padding:0;&#125;</span><br><span class="line">input[type=&quot;search&quot;]&#123;-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;&#125;</span><br><span class="line">input[type=&quot;search&quot;]::-webkit-search-decoration&#123;-webkit-appearance:none;&#125;</span><br><span class="line">@media screen and (-webkit-min-device-pixel-ratio:0)&#123;</span><br><span class="line">    input&#123;line-height:normal!important;&#125;</span><br><span class="line">&#125;</span><br><span class="line">select[size],select[multiple],select[size][multiple]&#123;border:1px solid #AAA;padding:0;&#125;</span><br><span class="line">article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary&#123;display:block;&#125;</span><br><span class="line">audio,canvas,video,progress&#123;display:inline-block;&#125;</span><br></pre></td></tr></table></figure>

<p>淘宝rem适配方案：<br>1.动态设置viewport的scale</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var scale = 1 / devicePixelRatio;</span><br><span class="line">document.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;).setAttribute(&apos;content&apos;,&apos;initial-scale=&apos; + scale + &apos;, maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;, user-scalable=no&apos;);</span><br></pre></td></tr></table></figure>

<p>2.动态计算html的font-size</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.documentElement.style.fontSize = document.documentElement.clientWidth / 10 + &apos;px&apos;;</span><br></pre></td></tr></table></figure>
<p>3.布局的时候，各元素的css尺寸=设计稿标注尺寸/设计稿横向分辨率/10<br>4.font-size可能需要额外的媒介查询，并且font-size不使用rem</p>
<h4 id="使用第三方插件-postcss-px2rem"><a href="#使用第三方插件-postcss-px2rem" class="headerlink" title="使用第三方插件 postcss-px2rem"></a>使用第三方插件 postcss-px2rem</h4><h5 id="安装postcss-px2rem"><a href="#安装postcss-px2rem" class="headerlink" title="安装postcss-px2rem"></a>安装postcss-px2rem</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install postcss-px2rem --save</span><br></pre></td></tr></table></figure>
<h5 id="vue-congfig-js-中配置"><a href="#vue-congfig-js-中配置" class="headerlink" title="vue.congfig.js 中配置"></a>vue.congfig.js 中配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const px2rem = require(&apos;postcss-px2rem&apos;)</span><br><span class="line">const postcss = px2rem(&#123;</span><br><span class="line">  remUnit: 100,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      postcss: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">          postcss,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Next配置live2d 看板娘</title>
    <url>/2019/12/01/use-live2d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="使用Next内置的live2d（基础版）"><a href="#使用Next内置的live2d（基础版）" class="headerlink" title="使用Next内置的live2d（基础版）"></a>使用Next内置的live2d（基础版）</h4><a id="more"></a><h5 id="安装live2d模块"><a href="#安装live2d模块" class="headerlink" title="安装live2d模块"></a>安装live2d模块</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<h5 id="站点配置文件-config-yml-中新增："><a href="#站点配置文件-config-yml-中新增：" class="headerlink" title="站点配置文件_config.yml 中新增："></a>站点配置文件_config.yml 中新增：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure>
<p>配置完以上步骤，清缓存，重新启动项目，刷新页面就可以看到博客右下角有个萌萌的站宠了。</p>
<h5 id="更换live2d模型"><a href="#更换live2d模型" class="headerlink" title="更换live2d模型"></a>更换live2d模型</h5><h6 id="安装模型对应的包名packagename"><a href="#安装模型对应的包名packagename" class="headerlink" title="安装模型对应的包名packagename"></a>安装模型对应的包名packagename</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-packagename  //packagename是要安装的包名</span><br></pre></td></tr></table></figure>
<p>效果参考：<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型效果</a><br>全部包名用法：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">npm 模块名</a></p>
<h6 id="使用新模型"><a href="#使用新模型" class="headerlink" title="使用新模型"></a>使用新模型</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model:</span><br><span class="line">    use: live2d-widget-model-packagename  #packagename改为新安装的模块名即可</span><br></pre></td></tr></table></figure>

<h4 id="高级版"><a href="#高级版" class="headerlink" title="高级版"></a>高级版</h4><p>具有换装、对话、换人等功能。<br>下载大神定制的作品：<a href="https://github.com/stevenjoezhang/live2d-widget">传送门</a><br>下载后解压并重新命名到 \themes\next\source 文件夹下，修改解压后文件中的 autoload.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;;</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const live2d_path = &quot;/重新命名的文件名/&quot;;</span><br></pre></td></tr></table></figure>
<p>在/themes/next/layout/_layout.swing中,body标签中新增如下内容，将yourName修改为自己的github账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://yourName.github.io/live2d/autoload.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>head标签中新增依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件_config.yml 中,添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>执行命令三连：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo c </span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>至此一个萌萌的站板娘就生成了。<br><img src="/images/live2d.png" alt></p>
<p>还可根据需要自行修改：<br>waifu.css修改看板的大小和位置，waifu-tips.json修改对话</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.jianshu.com/p/dba9a729fa57" target="_blank" rel="noopener">在hexo+next博客添加一个live2d看板娘</a><br><a href="https://blog.csdn.net/qq_39610915/article/details/90679768" target="_blank" rel="noopener">Hexo博客优化：在Next主题中设置进阶版Live2D看板娘</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Next 使用 valine 评论模块</title>
    <url>/2019/11/28/use-valine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="注册LeanCloude账号"><a href="#注册LeanCloude账号" class="headerlink" title="注册LeanCloude账号"></a>注册LeanCloude账号</h3><a id="more"></a><p>官网传送门： <a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloude</a></p>
<h3 id="LeanCloude配置"><a href="#LeanCloude配置" class="headerlink" title="LeanCloude配置"></a>LeanCloude配置</h3><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>点击创建应用<br><img src="/images/step1.png" alt><br>自己取一个应用名<br><img src="/images/step2.png" alt></p>
<h4 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h4><p>前面应用已经创建完毕，需要创建一个类Comment来存放评论信息。<br>在 LeanCloud -&gt; 存储 -&gt; 创建Class -&gt; 无限制的Class，class 名称为：Comment。<br><img src="/images/step3.png" alt></p>
<h4 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h4><p>在 leancloude -&gt; 设置 -&gt; 安全中心，把除数据存储外其他选项都关闭</p>
<h3 id="Next中配置valine"><a href="#Next中配置valine" class="headerlink" title="Next中配置valine"></a>Next中配置valine</h3><p>在leancloude -&gt; 设置 -&gt; 应用keys -&gt; 获得 appkey、appid<br>进入主题配置中，找到 <span style="color:red">valine</span>，配置appkey、appid</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version</span><br><span class="line">  appid:  # Your leancloud application appid</span><br><span class="line">  appkey: # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier. See: https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: &apos;ヾﾉ≧∀≦)o来啊，快活啊!&apos; # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br></pre></td></tr></table></figure>
<h3 id="配置CDN"><a href="#配置CDN" class="headerlink" title="配置CDN"></a>配置CDN</h3><p>进入主题配置文件，配置成第三方 CDN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Valine</span><br><span class="line"> # valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span><br><span class="line"> # valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.10/Valine.min.js</span><br><span class="line"> valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span><br></pre></td></tr></table></figure>

<h3 id="指定文章是否开启评论功能"><a href="#指定文章是否开启评论功能" class="headerlink" title="指定文章是否开启评论功能"></a>指定文章是否开启评论功能</h3><p>hexo评论的功能是在所有页面都默认开启的，但是有的时候我们在页面上不需要显示评论功能，例如分类，标记页面。<br>在Front-matter中设置comments: false即可关闭。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2019-11-28</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://tding.top/archives/ed8b904f.html" target="_blank" rel="noopener">https://tding.top/archives/ed8b904f.html</a><br><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997" target="_blank" rel="noopener">https://blog.csdn.net/jiunian_2761/article/details/97388997</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题配置Next</title>
    <url>/2019/11/27/hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="next开启文章版权板块"><a href="#next开启文章版权板块" class="headerlink" title="next开启文章版权板块"></a>next开启文章版权板块</h3><a id="more"></a><p>1.早期版本<br><a href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/" target="_blank" rel="noopener">教程</a></p>
<p>2.新版本，本文版本为 7.0.5为例<br>将主题配置中的post改为true，然后 hexo clean, hexo s 刷新文章页面即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>git从远程仓库获取最新代码合并到本地分支</title>
    <url>/2019/11/27/usegit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这里共展示两类三种方式。</p><a id="more"></a>
<h3 id="1-git-pull：获取最新代码到本地，并自动合并到当前分支"><a href="#1-git-pull：获取最新代码到本地，并自动合并到当前分支" class="headerlink" title="1.git pull：获取最新代码到本地，并自动合并到当前分支"></a>1.git pull：获取最新代码到本地，并自动合并到当前分支</h3><p>命令展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v </span><br><span class="line">//直接拉取并合并最新代码</span><br><span class="line">$ git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]</span><br><span class="line">$ git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]</span><br></pre></td></tr></table></figure>
<p style="color:red">分析：不推荐这种方式，因为是直接合并，无法提前处理冲突。</p>

<h3 id="2-git-fetch-merge-获取最新代码到本地，然后手动合并分支"><a href="#2-git-fetch-merge-获取最新代码到本地，然后手动合并分支" class="headerlink" title="2.git fetch + merge: 获取最新代码到本地，然后手动合并分支"></a>2.git fetch + merge: 获取最新代码到本地，然后手动合并分支</h3><h4 id="2-1-额外建立本地分支"><a href="#2-1-额外建立本地分支" class="headerlink" title="2.1.额外建立本地分支"></a>2.1.额外建立本地分支</h4><p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查看当前远程的版本</span><br><span class="line">$ git remote -v </span><br><span class="line">//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]</span><br><span class="line">$ git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]</span><br><span class="line">$ git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]</span><br><span class="line">//合并最新分支到本地分支</span><br><span class="line">$ git merge master1    [示例1：合并本地分支master1到当前分支]</span><br><span class="line">$ git merge dev1   [示例2：合并本地分支dev1到当前分支]</span><br><span class="line">//删除本地临时分支</span><br><span class="line">$ git branch -D master1    [示例1：删除本地分支master1]</span><br><span class="line">$ git branch -D dev1 [示例1：删除本地分支dev1]</span><br></pre></td></tr></table></figure>
<p style="color:red">备注：不推荐这种方式，还需要额外对临时分支进行处理。</p>

<h3 id="2-2-不额外建立本地分支"><a href="#2-2-不额外建立本地分支" class="headerlink" title="2.2 不额外建立本地分支"></a>2.2 不额外建立本地分支</h3><p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v</span><br><span class="line">//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master  [示例1：获取远端的origin/master分支]</span><br><span class="line">$ git fetch origin dev [示例2：获取远端的origin/dev分支]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git log -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]</span><br><span class="line">$ git log -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]</span><br><span class="line">//合并最新代码到本地分支</span><br><span class="line">$ git merge origin/master  [示例1：合并远端分支origin/master到当前分支]</span><br><span class="line">$ git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]</span><br></pre></td></tr></table></figure>
<p style="color:red">备注：推荐这种方式。</p>

<h3 id="原文链接：https-blog-csdn-net-hanchao5272-article-details-79162130"><a href="#原文链接：https-blog-csdn-net-hanchao5272-article-details-79162130" class="headerlink" title="原文链接：https://blog.csdn.net/hanchao5272/article/details/79162130"></a>原文链接：<a href="https://blog.csdn.net/hanchao5272/article/details/79162130" target="_blank" rel="noopener">https://blog.csdn.net/hanchao5272/article/details/79162130</a></h3><h3 id="git-本地创建远程分支"><a href="#git-本地创建远程分支" class="headerlink" title="git 本地创建远程分支"></a>git 本地创建远程分支</h3><p>$ git branch<br>    * master<br>      release</p>
<p>新建远程分支</p>
<p>新建一个本地分支：</p>
<pre><code>$ git checkout -b dbg_lichen_star</code></pre><p>查看一下现在的分支状态:</p>
<pre><code>$ git branch
* dbg_lichen_star
  master
  release</code></pre><p>星号(*)表示当前所在分支。现在的状态是成功创建的新的分支并且已经切换到新分支上。</p>
<p>把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）：</p>
<pre><code>$ git push origin dbg_lichen_star:dbg_lichen_star</code></pre><p>使用git branch -a查看所有分支，会看到remotes/origin/dbg_lichen_star这个远程分支，说明新建远程分支成功。<br>删除远程分支</p>
<p>我比较喜欢的简单方式，推送一个空分支到远程分支，其实就相当于删除远程分支：</p>
<pre><code>$ git push origin :dbg_lichen_star</code></pre><p>也可以使用：</p>
<pre><code>$ git push origin --delete dbg_lichen_star</code></pre><p>这两种方式都可以删除指定的远程分支</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><span style="color:red"><a href="https://blog.csdn.net/hanchao5272/article/details/79162130" target="_blank" rel="noopener">https://blog.csdn.net/hanchao5272/article/details/79162130</a></span></p>
]]></content>
      <categories>
        <category>版本控制工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
