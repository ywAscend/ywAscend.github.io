<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo主题配置Next</title>
    <url>/2019/11/27/hexo/</url>
    <content><![CDATA[<h3 id="next开启内置评论板块"><a href="#next开启内置评论板块" class="headerlink" title="next开启内置评论板块"></a>next开启内置评论板块</h3><p>1.早期版本<br><a href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/" target="_blank" rel="noopener">教程</a></p><p>2.新版本，本文版本为 7.0.5为例<br>将主题配置中的post改为true，然后 hexo clean, hexo s 刷新文章页面即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: true</span><br><span class="line">  post: true</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>git从远程仓库获取最新代码合并到本地分支</title>
    <url>/2019/11/27/usegit/</url>
    <content><![CDATA[<p>这里共展示两类三种方式。</p><h3 id="1-git-pull：获取最新代码到本地，并自动合并到当前分支"><a href="#1-git-pull：获取最新代码到本地，并自动合并到当前分支" class="headerlink" title="1.git pull：获取最新代码到本地，并自动合并到当前分支"></a>1.git pull：获取最新代码到本地，并自动合并到当前分支</h3><p>命令展示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v </span><br><span class="line">//直接拉取并合并最新代码</span><br><span class="line">$ git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]</span><br><span class="line">$ git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]</span><br></pre></td></tr></table></figure><a id="more"></a>


<p style="color:red">分析：不推荐这种方式，因为是直接合并，无法提前处理冲突。</p>

<h3 id="2-git-fetch-merge-获取最新代码到本地，然后手动合并分支"><a href="#2-git-fetch-merge-获取最新代码到本地，然后手动合并分支" class="headerlink" title="2.git fetch + merge: 获取最新代码到本地，然后手动合并分支"></a>2.git fetch + merge: 获取最新代码到本地，然后手动合并分支</h3><h4 id="2-1-额外建立本地分支"><a href="#2-1-额外建立本地分支" class="headerlink" title="2.1.额外建立本地分支"></a>2.1.额外建立本地分支</h4><p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查看当前远程的版本</span><br><span class="line">$ git remote -v </span><br><span class="line">//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]</span><br><span class="line">$ git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]</span><br><span class="line">$ git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]</span><br><span class="line">//合并最新分支到本地分支</span><br><span class="line">$ git merge master1    [示例1：合并本地分支master1到当前分支]</span><br><span class="line">$ git merge dev1   [示例2：合并本地分支dev1到当前分支]</span><br><span class="line">//删除本地临时分支</span><br><span class="line">$ git branch -D master1    [示例1：删除本地分支master1]</span><br><span class="line">$ git branch -D dev1 [示例1：删除本地分支dev1]</span><br></pre></td></tr></table></figure>
<p style="color:red">备注：不推荐这种方式，还需要额外对临时分支进行处理。</p>

<h3 id="2-2-不额外建立本地分支"><a href="#2-2-不额外建立本地分支" class="headerlink" title="2.2 不额外建立本地分支"></a>2.2 不额外建立本地分支</h3><p>代码展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v</span><br><span class="line">//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master  [示例1：获取远端的origin/master分支]</span><br><span class="line">$ git fetch origin dev [示例2：获取远端的origin/dev分支]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git log -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]</span><br><span class="line">$ git log -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]</span><br><span class="line">//合并最新代码到本地分支</span><br><span class="line">$ git merge origin/master  [示例1：合并远端分支origin/master到当前分支]</span><br><span class="line">$ git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]</span><br></pre></td></tr></table></figure>
<p style="color:red">备注：推荐这种方式。</p>

<h3 id="原文链接：https-blog-csdn-net-hanchao5272-article-details-79162130"><a href="#原文链接：https-blog-csdn-net-hanchao5272-article-details-79162130" class="headerlink" title="原文链接：https://blog.csdn.net/hanchao5272/article/details/79162130"></a>原文链接：<a href="https://blog.csdn.net/hanchao5272/article/details/79162130" target="_blank" rel="noopener">https://blog.csdn.net/hanchao5272/article/details/79162130</a></h3><h3 id="git-本地创建远程分支"><a href="#git-本地创建远程分支" class="headerlink" title="git 本地创建远程分支"></a>git 本地创建远程分支</h3><p>$ git branch<br>    * master<br>      release</p>
<p>新建远程分支</p>
<p>新建一个本地分支：</p>
<pre><code>$ git checkout -b dbg_lichen_star</code></pre><p>查看一下现在的分支状态:</p>
<pre><code>$ git branch
* dbg_lichen_star
  master
  release</code></pre><p>星号(*)表示当前所在分支。现在的状态是成功创建的新的分支并且已经切换到新分支上。</p>
<p>把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）：</p>
<pre><code>$ git push origin dbg_lichen_star:dbg_lichen_star</code></pre><p>使用git branch -a查看所有分支，会看到remotes/origin/dbg_lichen_star这个远程分支，说明新建远程分支成功。<br>删除远程分支</p>
<p>我比较喜欢的简单方式，推送一个空分支到远程分支，其实就相当于删除远程分支：</p>
<pre><code>$ git push origin :dbg_lichen_star</code></pre><p>也可以使用：</p>
<pre><code>$ git push origin --delete dbg_lichen_star</code></pre><p>这两种方式都可以删除指定的远程分支</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><span style="color:red"><a href="https://blog.csdn.net/hanchao5272/article/details/79162130" target="_blank" rel="noopener">https://blog.csdn.net/hanchao5272/article/details/79162130</a></span></p>
]]></content>
      <categories>
        <category>版本控制工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
